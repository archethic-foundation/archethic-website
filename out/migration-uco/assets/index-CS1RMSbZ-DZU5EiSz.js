import{d as O,g as ct,c as lr,e as Se,f as be,h as mr,i as pr,B as fr,j as ut,k as yr,S as wr,l as kr,m as Sr,n as br,b as Be,a as vr}from"./index-C2SM05Vf-DrEj5SaI.js";import{q as I,aW as V,aX as m,aY as w,aZ as j,a_ as x,a$ as he,b0 as xe,b1 as ne,b2 as Mn,b3 as re,cg as ce,ch as ke,cf as R,cn as Qt,co as Ar,d as v,bz as E,aN as Mr,aG as Tn,cm as Bn,aU as _,c2 as yt,c3 as Tr,aK as We,aS as St,bh as Br,al as X,aV as Xt,b4 as Ze,b5 as Ir,b6 as Cr,b7 as Pr,b8 as xr,b9 as Wr}from"./index-Bibw8odz.js";import{r as Er}from"./index-DpFNxVts-CtfGCFjC.js";import{S as Le,a as L,b as In,_ as Cn}from"./solana-DZGZ-AWd-QVqBWA_N.js";import{b as Pn}from"./chain-DfK5JtF7-Jmo_aVnV.js";import"./create-D7FD56l0-D2uTFRvt.js";var Rr=Object.defineProperty,zr=(t,e,n)=>e in t?Rr(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,T=(t,e,n)=>(zr(t,typeof e!="symbol"?e+"":e,n),n);class Ur extends TypeError{constructor(e,n){let r;const{message:i,...o}=e,{path:s}=e,a=s.length===0?i:"At path: "+s.join(".")+" -- "+i;super(a),Object.assign(this,o),this.name=this.constructor.name,this.failures=()=>{var u;return(u=r)!=null?u:r=[e,...n()]}}}function Fr(t){return ye(t)&&typeof t[Symbol.iterator]=="function"}function ye(t){return typeof t=="object"&&t!=null}function ue(t){return typeof t=="string"?JSON.stringify(t):""+t}function Nr(t){const{done:e,value:n}=t.next();return e?void 0:n}function Kr(t,e,n,r){if(t===!0)return;t===!1?t={}:typeof t=="string"&&(t={message:t});const{path:i,branch:o}=e,{type:s}=n,{refinement:a,message:u="Expected a value of type `"+s+"`"+(a?" with refinement `"+a+"`":"")+", but received: `"+ue(r)+"`"}=t;return{value:r,type:s,refinement:a,key:i[i.length-1],path:i,branch:o,...t,message:u}}function*Yt(t,e,n,r){Fr(t)||(t=[t]);for(const i of t){const o=Kr(i,e,n,r);o&&(yield o)}}function*Bt(t,e,n={}){const{path:r=[],branch:i=[t],coerce:o=!1,mask:s=!1}=n,a={path:r,branch:i};if(o&&(t=e.coercer(t,a),s&&e.type!=="type"&&ye(e.schema)&&ye(t)&&!Array.isArray(t)))for(const h in t)e.schema[h]===void 0&&delete t[h];let u=!0;for(const h of e.validator(t,a))u=!1,yield[h,void 0];for(let[h,S,k]of e.entries(t,a)){const b=Bt(S,k,{path:h===void 0?r:[...r,h],branch:h===void 0?i:[...i,S],coerce:o,mask:s});for(const M of b)M[0]?(u=!1,yield[M[0],void 0]):o&&(S=M[1],h===void 0?t=S:t instanceof Map?t.set(h,S):t instanceof Set?t.add(S):ye(t)&&(t[h]=S))}if(u)for(const h of e.refiner(t,a))u=!1,yield[h,void 0];u&&(yield[void 0,t])}let me=class{constructor(t){const{type:e,schema:n,validator:r,refiner:i,coercer:o=a=>a,entries:s=function*(){}}=t;this.type=e,this.schema=n,this.entries=s,this.coercer=o,r?this.validator=(a,u)=>{const h=r(a,u);return Yt(h,u,this,a)}:this.validator=()=>[],i?this.refiner=(a,u)=>{const h=i(a,u);return Yt(h,u,this,a)}:this.refiner=()=>[]}assert(t){return _r(t,this)}create(t){return Je(t,this)}is(t){return xn(t,this)}mask(t){return Or(t,this)}validate(t,e={}){return Qe(t,this,e)}};function _r(t,e){const n=Qe(t,e);if(n[0])throw n[0]}function Je(t,e){const n=Qe(t,e,{coerce:!0});if(n[0])throw n[0];return n[1]}function Or(t,e){const n=Qe(t,e,{coerce:!0,mask:!0});if(n[0])throw n[0];return n[1]}function xn(t,e){return!Qe(t,e)[0]}function Qe(t,e,n={}){const r=Bt(t,e,n),i=Nr(r);return i[0]?[new Ur(i[0],function*(){for(const o of r)o[0]&&(yield o[0])}),void 0]:[void 0,i[1]]}function ve(t,e){return new me({type:t,schema:null,validator:e})}function qr(){return ve("any",()=>!0)}function f(t){return new me({type:"array",schema:t,*entries(e){if(t&&Array.isArray(e))for(const[n,r]of e.entries())yield[n,r,t]},coercer(e){return Array.isArray(e)?e.slice():e},validator(e){return Array.isArray(e)||"Expected an array value, but received: "+ue(e)}})}function le(){return ve("boolean",t=>typeof t=="boolean")}function It(t){return ve("instance",e=>e instanceof t||"Expected a `"+t.name+"` instance, but received: "+ue(e))}function U(t){const e=ue(t),n=typeof t;return new me({type:"literal",schema:n==="string"||n==="number"||n==="boolean"?t:null,validator(r){return r===t||"Expected the literal `"+e+"`, but received: "+ue(r)}})}function Lr(){return ve("never",()=>!1)}function p(t){return new me({...t,validator:(e,n)=>e===null||t.validator(e,n),refiner:(e,n)=>e===null||t.refiner(e,n)})}function c(){return ve("number",t=>typeof t=="number"&&!isNaN(t)||"Expected a number, but received: "+ue(t))}function A(t){return new me({...t,validator:(e,n)=>e===void 0||t.validator(e,n),refiner:(e,n)=>e===void 0||t.refiner(e,n)})}function Wn(t,e){return new me({type:"record",schema:null,*entries(n){if(ye(n))for(const r in n){const i=n[r];yield[r,r,t],yield[r,i,e]}},validator(n){return ye(n)||"Expected an object, but received: "+ue(n)}})}function l(){return ve("string",t=>typeof t=="string"||"Expected a string, but received: "+ue(t))}function Ct(t){const e=Lr();return new me({type:"tuple",schema:null,*entries(n){if(Array.isArray(n)){const r=Math.max(t.length,n.length);for(let i=0;i<r;i++)yield[i,n[i],t[i]||e]}},validator(n){return Array.isArray(n)||"Expected an array, but received: "+ue(n)}})}function g(t){const e=Object.keys(t);return new me({type:"type",schema:t,*entries(n){if(ye(n))for(const r of e)yield[r,n[r],t[r]]},validator(n){return ye(n)||"Expected an object, but received: "+ue(n)}})}function J(t){const e=t.map(n=>n.type).join(" | ");return new me({type:"union",schema:null,validator(n,r){const i=[];for(const o of t){const[...s]=Bt(n,o,r),[a]=s;if(a[0])for(const[u]of s)u&&i.push(u);else return[]}return["Expected the value to satisfy a union of `"+e+"`, but received: "+ue(n),...i]}})}function Xe(){return ve("unknown",()=>!0)}function Ye(t,e,n){return new me({...t,coercer:(r,i)=>xn(r,e)?t.coercer(n(r,i),i):t.coercer(r,i)})}const en=()=>{const t=Ze.utils.randomPrivateKey(),e=bt(t),n=new Uint8Array(64);return n.set(t),n.set(e,32),{publicKey:e,secretKey:n}},bt=Ze.getPublicKey;function tn(t){try{return Ze.ExtendedPoint.fromHex(t),!0}catch{return!1}}const Dr=(t,e)=>Ze.sign(t,e.slice(0,32)),Vr=Ze.verify,H=t=>I.Buffer.isBuffer(t)?t:t instanceof Uint8Array?I.Buffer.from(t.buffer,t.byteOffset,t.byteLength):I.Buffer.from(t);class $r{constructor(e){Object.assign(this,e)}encode(){return I.Buffer.from(Ir(nt,this))}static decode(e){return Cr(nt,this,e)}static decodeUnchecked(e){return Pr(nt,this,e)}}const nt=new Map;var En;let Rn;const Hr=32,He=32;function jr(t){return t._bn!==void 0}let nn=1;Rn=Symbol.toStringTag;class d extends $r{constructor(e){if(super({}),this._bn=void 0,jr(e))this._bn=e._bn;else{if(typeof e=="string"){const n=X.decode(e);if(n.length!=He)throw new Error("Invalid public key input");this._bn=new _(n)}else this._bn=new _(e);if(this._bn.byteLength()>He)throw new Error("Invalid public key input")}}static unique(){const e=new d(nn);return nn+=1,new d(e.toBuffer())}equals(e){return this._bn.eq(e._bn)}toBase58(){return X.encode(this.toBytes())}toJSON(){return this.toBase58()}toBytes(){const e=this.toBuffer();return new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}toBuffer(){const e=this._bn.toArrayLike(I.Buffer);if(e.length===He)return e;const n=I.Buffer.alloc(32);return e.copy(n,32-e.length),n}get[Rn](){return`PublicKey(${this.toString()})`}toString(){return this.toBase58()}static async createWithSeed(e,n,r){const i=I.Buffer.concat([e.toBuffer(),I.Buffer.from(n),r.toBuffer()]),o=Xt(i);return new d(o)}static createProgramAddressSync(e,n){let r=I.Buffer.alloc(0);e.forEach(function(o){if(o.length>Hr)throw new TypeError("Max seed length exceeded");r=I.Buffer.concat([r,H(o)])}),r=I.Buffer.concat([r,n.toBuffer(),I.Buffer.from("ProgramDerivedAddress")]);const i=Xt(r);if(tn(i))throw new Error("Invalid seeds, address must fall off the curve");return new d(i)}static async createProgramAddress(e,n){return this.createProgramAddressSync(e,n)}static findProgramAddressSync(e,n){let r=255,i;for(;r!=0;){try{const o=e.concat(I.Buffer.from([r]));i=this.createProgramAddressSync(o,n)}catch(o){if(o instanceof TypeError)throw o;r--;continue}return[i,r]}throw new Error("Unable to find a viable program address nonce")}static async findProgramAddress(e,n){return this.findProgramAddressSync(e,n)}static isOnCurve(e){const n=new d(e);return tn(n.toBytes())}}En=d;d.default=new En("11111111111111111111111111111111");nt.set(d,{kind:"struct",fields:[["_bn","u256"]]});new d("BPFLoader1111111111111111111111111111111111");const vt=1232,Jr=127,zn=64;class rn{constructor(e,n){this.staticAccountKeys=void 0,this.accountKeysFromLookups=void 0,this.staticAccountKeys=e,this.accountKeysFromLookups=n}keySegments(){const e=[this.staticAccountKeys];return this.accountKeysFromLookups&&(e.push(this.accountKeysFromLookups.writable),e.push(this.accountKeysFromLookups.readonly)),e}get(e){for(const n of this.keySegments()){if(e<n.length)return n[e];e-=n.length}}get length(){return this.keySegments().flat().length}compileInstructions(e){if(this.length>256)throw new Error("Account index overflow encountered during compilation");const n=new Map;this.keySegments().flat().forEach((i,o)=>{n.set(i.toBase58(),o)});const r=i=>{const o=n.get(i.toBase58());if(o===void 0)throw new Error("Encountered an unknown instruction account key during compilation");return o};return e.map(i=>({programIdIndex:r(i.programId),accountKeyIndexes:i.keys.map(o=>r(o.pubkey)),data:i.data}))}}const P=(t="publicKey")=>re(32,t),Pe=(t="string")=>{const e=m([w("length"),w("lengthPadding"),re(xe(w(),-8),"chars")],t),n=e.decode.bind(e),r=e.encode.bind(e),i=e;return i.decode=(o,s)=>n(o,s).chars.toString(),i.encode=(o,s,a)=>{const u={chars:I.Buffer.from(o,"utf8")};return r(u,s,a)},i.alloc=o=>w().span+w().span+I.Buffer.from(o,"utf8").length,i},Gr=(t="authorized")=>m([P("staker"),P("withdrawer")],t),Zr=(t="lockup")=>m([j("unixTimestamp"),j("epoch"),P("custodian")],t),Qr=(t="voteInit")=>m([P("nodePubkey"),P("authorizedVoter"),P("authorizedWithdrawer"),x("commission")],t),Xr=(t="voteAuthorizeWithSeedArgs")=>m([w("voteAuthorizationType"),P("currentAuthorityDerivedKeyOwnerPubkey"),Pe("currentAuthorityDerivedKeySeed"),P("newAuthorized")],t);function Un(t,e){const n=i=>{if(i.span>=0)return i.span;if(typeof i.alloc=="function")return i.alloc(e[i.property]);if("count"in i&&"elementLayout"in i){const o=e[i.property];if(Array.isArray(o))return o.length*n(i.elementLayout)}else if("fields"in i)return Un({layout:i},e[i.property]);return 0};let r=0;return t.layout.fields.forEach(i=>{r+=n(i)}),r}function De(t){let e=0,n=0;for(;;){let r=t.shift();if(e|=(r&127)<<n*7,n+=1,!(r&128))break}return e}function Ve(t,e){let n=e;for(;;){let r=n&127;if(n>>=7,n==0){t.push(r);break}else r|=128,t.push(r)}}function Z(t,e){if(!t)throw new Error(e||"Assertion failed")}class Pt{constructor(e,n){this.payer=void 0,this.keyMetaMap=void 0,this.payer=e,this.keyMetaMap=n}static compile(e,n){const r=new Map,i=s=>{const a=s.toBase58();let u=r.get(a);return u===void 0&&(u={isSigner:!1,isWritable:!1,isInvoked:!1},r.set(a,u)),u},o=i(n);o.isSigner=!0,o.isWritable=!0;for(const s of e){i(s.programId).isInvoked=!0;for(const a of s.keys){const u=i(a.pubkey);u.isSigner||(u.isSigner=a.isSigner),u.isWritable||(u.isWritable=a.isWritable)}}return new Pt(n,r)}getMessageComponents(){const e=[...this.keyMetaMap.entries()];Z(e.length<=256,"Max static account keys length exceeded");const n=e.filter(([,u])=>u.isSigner&&u.isWritable),r=e.filter(([,u])=>u.isSigner&&!u.isWritable),i=e.filter(([,u])=>!u.isSigner&&u.isWritable),o=e.filter(([,u])=>!u.isSigner&&!u.isWritable),s={numRequiredSignatures:n.length+r.length,numReadonlySignedAccounts:r.length,numReadonlyUnsignedAccounts:o.length};{Z(n.length>0,"Expected at least one writable signer key");const[u]=n[0];Z(u===this.payer.toBase58(),"Expected first writable signer key to be the fee payer")}const a=[...n.map(([u])=>new d(u)),...r.map(([u])=>new d(u)),...i.map(([u])=>new d(u)),...o.map(([u])=>new d(u))];return[s,a]}extractTableLookup(e){const[n,r]=this.drainKeysFoundInLookupTable(e.state.addresses,s=>!s.isSigner&&!s.isInvoked&&s.isWritable),[i,o]=this.drainKeysFoundInLookupTable(e.state.addresses,s=>!s.isSigner&&!s.isInvoked&&!s.isWritable);if(!(n.length===0&&i.length===0))return[{accountKey:e.key,writableIndexes:n,readonlyIndexes:i},{writable:r,readonly:o}]}drainKeysFoundInLookupTable(e,n){const r=new Array,i=new Array;for(const[o,s]of this.keyMetaMap.entries())if(n(s)){const a=new d(o),u=e.findIndex(h=>h.equals(a));u>=0&&(Z(u<256,"Max lookup table index exceeded"),r.push(u),i.push(a),this.keyMetaMap.delete(o))}return[r,i]}}const Fn="Reached end of buffer unexpectedly";function tt(t){if(t.length===0)throw new Error(Fn);return t.shift()}function $e(t,...e){const[n]=e;if(e.length===2?n+(e[1]??0)>t.length:n>=t.length)throw new Error(Fn);return t.splice(...e)}class Ge{constructor(e){this.header=void 0,this.accountKeys=void 0,this.recentBlockhash=void 0,this.instructions=void 0,this.indexToProgramIds=new Map,this.header=e.header,this.accountKeys=e.accountKeys.map(n=>new d(n)),this.recentBlockhash=e.recentBlockhash,this.instructions=e.instructions,this.instructions.forEach(n=>this.indexToProgramIds.set(n.programIdIndex,this.accountKeys[n.programIdIndex]))}get version(){return"legacy"}get staticAccountKeys(){return this.accountKeys}get compiledInstructions(){return this.instructions.map(e=>({programIdIndex:e.programIdIndex,accountKeyIndexes:e.accounts,data:X.decode(e.data)}))}get addressTableLookups(){return[]}getAccountKeys(){return new rn(this.staticAccountKeys)}static compile(e){const n=Pt.compile(e.instructions,e.payerKey),[r,i]=n.getMessageComponents(),o=new rn(i).compileInstructions(e.instructions).map(s=>({programIdIndex:s.programIdIndex,accounts:s.accountKeyIndexes,data:X.encode(s.data)}));return new Ge({header:r,accountKeys:i,recentBlockhash:e.recentBlockhash,instructions:o})}isAccountSigner(e){return e<this.header.numRequiredSignatures}isAccountWritable(e){const n=this.header.numRequiredSignatures;if(e>=this.header.numRequiredSignatures){const r=e-n,i=this.accountKeys.length-n-this.header.numReadonlyUnsignedAccounts;return r<i}else{const r=n-this.header.numReadonlySignedAccounts;return e<r}}isProgramId(e){return this.indexToProgramIds.has(e)}programIds(){return[...this.indexToProgramIds.values()]}nonProgramIds(){return this.accountKeys.filter((e,n)=>!this.isProgramId(n))}serialize(){const e=this.accountKeys.length;let n=[];Ve(n,e);const r=this.instructions.map(k=>{const{accounts:b,programIdIndex:M}=k,B=Array.from(X.decode(k.data));let y=[];Ve(y,b.length);let C=[];return Ve(C,B.length),{programIdIndex:M,keyIndicesCount:I.Buffer.from(y),keyIndices:b,dataLength:I.Buffer.from(C),data:B}});let i=[];Ve(i,r.length);let o=I.Buffer.alloc(vt);I.Buffer.from(i).copy(o);let s=i.length;r.forEach(k=>{const b=m([x("programIdIndex"),re(k.keyIndicesCount.length,"keyIndicesCount"),he(x("keyIndex"),k.keyIndices.length,"keyIndices"),re(k.dataLength.length,"dataLength"),he(x("userdatum"),k.data.length,"data")]).encode(k,o,s);s+=b}),o=o.slice(0,s);const a=m([re(1,"numRequiredSignatures"),re(1,"numReadonlySignedAccounts"),re(1,"numReadonlyUnsignedAccounts"),re(n.length,"keyCount"),he(P("key"),e,"keys"),P("recentBlockhash")]),u={numRequiredSignatures:I.Buffer.from([this.header.numRequiredSignatures]),numReadonlySignedAccounts:I.Buffer.from([this.header.numReadonlySignedAccounts]),numReadonlyUnsignedAccounts:I.Buffer.from([this.header.numReadonlyUnsignedAccounts]),keyCount:I.Buffer.from(n),keys:this.accountKeys.map(k=>H(k.toBytes())),recentBlockhash:X.decode(this.recentBlockhash)};let h=I.Buffer.alloc(2048);const S=a.encode(u,h);return o.copy(h,S),h.slice(0,S+o.length)}static from(e){let n=[...e];const r=tt(n);if(r!==(r&Jr))throw new Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");const i=tt(n),o=tt(n),s=De(n);let a=[];for(let b=0;b<s;b++){const M=$e(n,0,He);a.push(new d(I.Buffer.from(M)))}const u=$e(n,0,He),h=De(n);let S=[];for(let b=0;b<h;b++){const M=tt(n),B=De(n),y=$e(n,0,B),C=De(n),W=$e(n,0,C),q=X.encode(I.Buffer.from(W));S.push({programIdIndex:M,accounts:y,data:q})}const k={header:{numRequiredSignatures:r,numReadonlySignedAccounts:i,numReadonlyUnsignedAccounts:o},recentBlockhash:X.encode(I.Buffer.from(u)),accountKeys:a,instructions:S};return new Ge(k)}}const Yr=I.Buffer.alloc(zn).fill(0);class ${constructor(e){this.keys=void 0,this.programId=void 0,this.data=I.Buffer.alloc(0),this.programId=e.programId,this.keys=e.keys,e.data&&(this.data=e.data)}toJSON(){return{keys:this.keys.map(({pubkey:e,isSigner:n,isWritable:r})=>({pubkey:e.toJSON(),isSigner:n,isWritable:r})),programId:this.programId.toJSON(),data:[...this.data]}}}class Q{get signature(){return this.signatures.length>0?this.signatures[0].signature:null}constructor(e){if(this.signatures=[],this.feePayer=void 0,this.instructions=[],this.recentBlockhash=void 0,this.lastValidBlockHeight=void 0,this.nonceInfo=void 0,this.minNonceContextSlot=void 0,this._message=void 0,this._json=void 0,!!e)if(e.feePayer&&(this.feePayer=e.feePayer),e.signatures&&(this.signatures=e.signatures),Object.prototype.hasOwnProperty.call(e,"nonceInfo")){const{minContextSlot:n,nonceInfo:r}=e;this.minNonceContextSlot=n,this.nonceInfo=r}else if(Object.prototype.hasOwnProperty.call(e,"lastValidBlockHeight")){const{blockhash:n,lastValidBlockHeight:r}=e;this.recentBlockhash=n,this.lastValidBlockHeight=r}else{const{recentBlockhash:n,nonceInfo:r}=e;r&&(this.nonceInfo=r),this.recentBlockhash=n}}toJSON(){return{recentBlockhash:this.recentBlockhash||null,feePayer:this.feePayer?this.feePayer.toJSON():null,nonceInfo:this.nonceInfo?{nonce:this.nonceInfo.nonce,nonceInstruction:this.nonceInfo.nonceInstruction.toJSON()}:null,instructions:this.instructions.map(e=>e.toJSON()),signers:this.signatures.map(({publicKey:e})=>e.toJSON())}}add(...e){if(e.length===0)throw new Error("No instructions");return e.forEach(n=>{"instructions"in n?this.instructions=this.instructions.concat(n.instructions):"data"in n&&"programId"in n&&"keys"in n?this.instructions.push(n):this.instructions.push(new $(n))}),this}compileMessage(){if(this._message&&JSON.stringify(this.toJSON())===JSON.stringify(this._json))return this._message;let e,n;if(this.nonceInfo?(e=this.nonceInfo.nonce,this.instructions[0]!=this.nonceInfo.nonceInstruction?n=[this.nonceInfo.nonceInstruction,...this.instructions]:n=this.instructions):(e=this.recentBlockhash,n=this.instructions),!e)throw new Error("Transaction recentBlockhash required");n.length<1&&console.warn("No instructions provided");let r;if(this.feePayer)r=this.feePayer;else if(this.signatures.length>0&&this.signatures[0].publicKey)r=this.signatures[0].publicKey;else throw new Error("Transaction fee payer required");for(let y=0;y<n.length;y++)if(n[y].programId===void 0)throw new Error(`Transaction instruction index ${y} has undefined program id`);const i=[],o=[];n.forEach(y=>{y.keys.forEach(W=>{o.push({...W})});const C=y.programId.toString();i.includes(C)||i.push(C)}),i.forEach(y=>{o.push({pubkey:new d(y),isSigner:!1,isWritable:!1})});const s=[];o.forEach(y=>{const C=y.pubkey.toString(),W=s.findIndex(q=>q.pubkey.toString()===C);W>-1?(s[W].isWritable=s[W].isWritable||y.isWritable,s[W].isSigner=s[W].isSigner||y.isSigner):s.push(y)}),s.sort(function(y,C){if(y.isSigner!==C.isSigner)return y.isSigner?-1:1;if(y.isWritable!==C.isWritable)return y.isWritable?-1:1;const W={localeMatcher:"best fit",usage:"sort",sensitivity:"variant",ignorePunctuation:!1,numeric:!1,caseFirst:"lower"};return y.pubkey.toBase58().localeCompare(C.pubkey.toBase58(),"en",W)});const a=s.findIndex(y=>y.pubkey.equals(r));if(a>-1){const[y]=s.splice(a,1);y.isSigner=!0,y.isWritable=!0,s.unshift(y)}else s.unshift({pubkey:r,isSigner:!0,isWritable:!0});for(const y of this.signatures){const C=s.findIndex(W=>W.pubkey.equals(y.publicKey));if(C>-1)s[C].isSigner||(s[C].isSigner=!0,console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."));else throw new Error(`unknown signer: ${y.publicKey.toString()}`)}let u=0,h=0,S=0;const k=[],b=[];s.forEach(({pubkey:y,isSigner:C,isWritable:W})=>{C?(k.push(y.toString()),u+=1,W||(h+=1)):(b.push(y.toString()),W||(S+=1))});const M=k.concat(b),B=n.map(y=>{const{data:C,programId:W}=y;return{programIdIndex:M.indexOf(W.toString()),accounts:y.keys.map(q=>M.indexOf(q.pubkey.toString())),data:X.encode(C)}});return B.forEach(y=>{Z(y.programIdIndex>=0),y.accounts.forEach(C=>Z(C>=0))}),new Ge({header:{numRequiredSignatures:u,numReadonlySignedAccounts:h,numReadonlyUnsignedAccounts:S},accountKeys:M,recentBlockhash:e,instructions:B})}_compile(){const e=this.compileMessage(),n=e.accountKeys.slice(0,e.header.numRequiredSignatures);return this.signatures.length===n.length&&this.signatures.every((r,i)=>n[i].equals(r.publicKey))||(this.signatures=n.map(r=>({signature:null,publicKey:r}))),e}serializeMessage(){return this._compile().serialize()}async getEstimatedFee(e){return(await e.getFeeForMessage(this.compileMessage())).value}setSigners(...e){if(e.length===0)throw new Error("No signers");const n=new Set;this.signatures=e.filter(r=>{const i=r.toString();return n.has(i)?!1:(n.add(i),!0)}).map(r=>({signature:null,publicKey:r}))}sign(...e){if(e.length===0)throw new Error("No signers");const n=new Set,r=[];for(const o of e){const s=o.publicKey.toString();n.has(s)||(n.add(s),r.push(o))}this.signatures=r.map(o=>({signature:null,publicKey:o.publicKey}));const i=this._compile();this._partialSign(i,...r)}partialSign(...e){if(e.length===0)throw new Error("No signers");const n=new Set,r=[];for(const o of e){const s=o.publicKey.toString();n.has(s)||(n.add(s),r.push(o))}const i=this._compile();this._partialSign(i,...r)}_partialSign(e,...n){const r=e.serialize();n.forEach(i=>{const o=Dr(r,i.secretKey);this._addSignature(i.publicKey,H(o))})}addSignature(e,n){this._compile(),this._addSignature(e,n)}_addSignature(e,n){Z(n.length===64);const r=this.signatures.findIndex(i=>e.equals(i.publicKey));if(r<0)throw new Error(`unknown signer: ${e.toString()}`);this.signatures[r].signature=I.Buffer.from(n)}verifySignatures(e=!0){return!this._getMessageSignednessErrors(this.serializeMessage(),e)}_getMessageSignednessErrors(e,n){const r={};for(const{signature:i,publicKey:o}of this.signatures)i===null?n&&(r.missing||(r.missing=[])).push(o):Vr(i,e,o.toBytes())||(r.invalid||(r.invalid=[])).push(o);return r.invalid||r.missing?r:void 0}serialize(e){const{requireAllSignatures:n,verifySignatures:r}=Object.assign({requireAllSignatures:!0,verifySignatures:!0},e),i=this.serializeMessage();if(r){const o=this._getMessageSignednessErrors(i,n);if(o){let s="Signature verification failed.";throw o.invalid&&(s+=`
Invalid signature for public key${o.invalid.length===1?"":"(s)"} [\`${o.invalid.map(a=>a.toBase58()).join("`, `")}\`].`),o.missing&&(s+=`
Missing signature for public key${o.missing.length===1?"":"(s)"} [\`${o.missing.map(a=>a.toBase58()).join("`, `")}\`].`),new Error(s)}}return this._serialize(i)}_serialize(e){const{signatures:n}=this,r=[];Ve(r,n.length);const i=r.length+n.length*64+e.length,o=I.Buffer.alloc(i);return Z(n.length<256),I.Buffer.from(r).copy(o,0),n.forEach(({signature:s},a)=>{s!==null&&(Z(s.length===64,"signature has invalid length"),I.Buffer.from(s).copy(o,r.length+a*64))}),e.copy(o,r.length+n.length*64),Z(o.length<=vt,`Transaction too large: ${o.length} > ${vt}`),o}get keys(){return Z(this.instructions.length===1),this.instructions[0].keys.map(e=>e.pubkey)}get programId(){return Z(this.instructions.length===1),this.instructions[0].programId}get data(){return Z(this.instructions.length===1),this.instructions[0].data}static from(e){let n=[...e];const r=De(n);let i=[];for(let o=0;o<r;o++){const s=$e(n,0,zn);i.push(X.encode(I.Buffer.from(s)))}return Q.populate(Ge.from(n),i)}static populate(e,n=[]){const r=new Q;return r.recentBlockhash=e.recentBlockhash,e.header.numRequiredSignatures>0&&(r.feePayer=e.accountKeys[0]),n.forEach((i,o)=>{const s={signature:i==X.encode(Yr)?null:X.decode(i),publicKey:e.accountKeys[o]};r.signatures.push(s)}),e.instructions.forEach(i=>{const o=i.accounts.map(s=>{const a=e.accountKeys[s];return{pubkey:a,isSigner:r.signatures.some(u=>u.publicKey.toString()===a.toString())||e.isAccountSigner(s),isWritable:e.isAccountWritable(s)}});r.instructions.push(new $({keys:o,programId:e.accountKeys[i.programIdIndex],data:X.decode(i.data)}))}),r._message=e,r._json=r.toJSON(),r}}const ei=new d("SysvarC1ock11111111111111111111111111111111");new d("SysvarEpochSchedu1e111111111111111111111111");new d("Sysvar1nstructions1111111111111111111111111");const wt=new d("SysvarRecentB1ockHashes11111111111111111111"),oe=new d("SysvarRent111111111111111111111111111111111");new d("SysvarRewards111111111111111111111111111111");new d("SysvarS1otHashes111111111111111111111111111");new d("SysvarS1otHistory11111111111111111111111111");new d("SysvarStakeHistory1111111111111111111111111");function ee(t,e){const n=t.layout.span>=0?t.layout.span:Un(t,e),r=I.Buffer.alloc(n),i=Object.assign({instruction:t.index},e);return t.layout.encode(i,r),r}const ti=V("lamportsPerSignature"),ni=m([w("version"),w("state"),P("authorizedPubkey"),P("nonce"),m([ti],"feeCalculator")]),on=ni.span,ri=t=>{const e=t.decode.bind(t),n=t.encode.bind(t);return{decode:e,encode:n}},ii=t=>e=>{const n=re(t,e),{encode:r,decode:i}=ri(n),o=n;return o.decode=(s,a)=>{const u=i(s,a);return xr(I.Buffer.from(u))},o.encode=(s,a,u)=>{const h=Wr(s,t);return r(h,a,u)},o},Ee=ii(8),te=Object.freeze({Create:{index:0,layout:m([w("instruction"),j("lamports"),j("space"),P("programId")])},Assign:{index:1,layout:m([w("instruction"),P("programId")])},Transfer:{index:2,layout:m([w("instruction"),Ee("lamports")])},CreateWithSeed:{index:3,layout:m([w("instruction"),P("base"),Pe("seed"),j("lamports"),j("space"),P("programId")])},AdvanceNonceAccount:{index:4,layout:m([w("instruction")])},WithdrawNonceAccount:{index:5,layout:m([w("instruction"),j("lamports")])},InitializeNonceAccount:{index:6,layout:m([w("instruction"),P("authorized")])},AuthorizeNonceAccount:{index:7,layout:m([w("instruction"),P("authorized")])},Allocate:{index:8,layout:m([w("instruction"),j("space")])},AllocateWithSeed:{index:9,layout:m([w("instruction"),P("base"),Pe("seed"),j("space"),P("programId")])},AssignWithSeed:{index:10,layout:m([w("instruction"),P("base"),Pe("seed"),P("programId")])},TransferWithSeed:{index:11,layout:m([w("instruction"),Ee("lamports"),Pe("seed"),P("programId")])},UpgradeNonceAccount:{index:12,layout:m([w("instruction")])}});class D{constructor(){}static createAccount(e){const n=te.Create,r=ee(n,{lamports:e.lamports,space:e.space,programId:H(e.programId.toBuffer())});return new $({keys:[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!0,isWritable:!0}],programId:this.programId,data:r})}static transfer(e){let n,r;if("basePubkey"in e){const i=te.TransferWithSeed;n=ee(i,{lamports:BigInt(e.lamports),seed:e.seed,programId:H(e.programId.toBuffer())}),r=[{pubkey:e.fromPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}else{const i=te.Transfer;n=ee(i,{lamports:BigInt(e.lamports)}),r=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}return new $({keys:r,programId:this.programId,data:n})}static assign(e){let n,r;if("basePubkey"in e){const i=te.AssignWithSeed;n=ee(i,{base:H(e.basePubkey.toBuffer()),seed:e.seed,programId:H(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{const i=te.Assign;n=ee(i,{programId:H(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new $({keys:r,programId:this.programId,data:n})}static createAccountWithSeed(e){const n=te.CreateWithSeed,r=ee(n,{base:H(e.basePubkey.toBuffer()),seed:e.seed,lamports:e.lamports,space:e.space,programId:H(e.programId.toBuffer())});let i=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!1,isWritable:!0}];return e.basePubkey!=e.fromPubkey&&i.push({pubkey:e.basePubkey,isSigner:!0,isWritable:!1}),new $({keys:i,programId:this.programId,data:r})}static createNonceAccount(e){const n=new Q;"basePubkey"in e&&"seed"in e?n.add(D.createAccountWithSeed({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,basePubkey:e.basePubkey,seed:e.seed,lamports:e.lamports,space:on,programId:this.programId})):n.add(D.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,lamports:e.lamports,space:on,programId:this.programId}));const r={noncePubkey:e.noncePubkey,authorizedPubkey:e.authorizedPubkey};return n.add(this.nonceInitialize(r)),n}static nonceInitialize(e){const n=te.InitializeNonceAccount,r=ee(n,{authorized:H(e.authorizedPubkey.toBuffer())}),i={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:wt,isSigner:!1,isWritable:!1},{pubkey:oe,isSigner:!1,isWritable:!1}],programId:this.programId,data:r};return new $(i)}static nonceAdvance(e){const n=te.AdvanceNonceAccount,r=ee(n),i={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:wt,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:r};return new $(i)}static nonceWithdraw(e){const n=te.WithdrawNonceAccount,r=ee(n,{lamports:e.lamports});return new $({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0},{pubkey:wt,isSigner:!1,isWritable:!1},{pubkey:oe,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:r})}static nonceAuthorize(e){const n=te.AuthorizeNonceAccount,r=ee(n,{authorized:H(e.newAuthorizedPubkey.toBuffer())});return new $({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:r})}static allocate(e){let n,r;if("basePubkey"in e){const i=te.AllocateWithSeed;n=ee(i,{base:H(e.basePubkey.toBuffer()),seed:e.seed,space:e.space,programId:H(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{const i=te.Allocate;n=ee(i,{space:e.space}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new $({keys:r,programId:this.programId,data:n})}}D.programId=new d("11111111111111111111111111111111");new d("BPFLoader2111111111111111111111111111111111");m([w("typeIndex"),Ee("deactivationSlot"),V("lastExtendedSlot"),x("lastExtendedStartIndex"),x(),he(P(),xe(x(),-1),"authority")]);const K=Ye(It(d),l(),t=>new d(t)),Nn=Ct([l(),U("base64")]),xt=Ye(It(I.Buffer),Nn,t=>I.Buffer.from(t[0],"base64"));function Kn(t){return J([g({jsonrpc:U("2.0"),id:l(),result:t}),g({jsonrpc:U("2.0"),id:l(),error:g({code:Xe(),message:l(),data:A(qr())})})])}const oi=Kn(Xe());function z(t){return Ye(Kn(t),oi,e=>"error"in e?e:{...e,result:Je(e.result,t)})}function se(t){return z(g({context:g({slot:c()}),value:t}))}function dt(t){return g({context:g({slot:c()}),value:t})}const si=g({foundation:c(),foundationTerm:c(),initial:c(),taper:c(),terminal:c()});z(f(p(g({epoch:c(),effectiveSlot:c(),amount:c(),postBalance:c(),commission:A(p(c()))}))));const ai=f(g({slot:c(),prioritizationFee:c()})),ci=g({total:c(),validator:c(),foundation:c(),epoch:c()}),ui=g({epoch:c(),slotIndex:c(),slotsInEpoch:c(),absoluteSlot:c(),blockHeight:A(c()),transactionCount:A(c())}),di=g({slotsPerEpoch:c(),leaderScheduleSlotOffset:c(),warmup:le(),firstNormalEpoch:c(),firstNormalSlot:c()}),gi=Wn(l(),f(c())),Ae=p(J([g({}),l()])),hi=g({err:Ae}),li=U("receivedSignature");g({"solana-core":l(),"feature-set":A(c())});se(g({err:p(J([g({}),l()])),logs:p(f(l())),accounts:A(p(f(p(g({executable:le(),owner:l(),lamports:c(),data:f(l()),rentEpoch:A(c())}))))),unitsConsumed:A(c()),returnData:A(p(g({programId:l(),data:Ct([l(),U("base64")])})))}));se(g({byIdentity:Wn(l(),f(c())),range:g({firstSlot:c(),lastSlot:c()})}));z(si);z(ci);z(ai);z(ui);z(di);z(gi);z(c());se(g({total:c(),circulating:c(),nonCirculating:c(),nonCirculatingAccounts:f(K)}));const mi=g({amount:l(),uiAmount:p(c()),decimals:c(),uiAmountString:A(l())});se(f(g({address:K,amount:l(),uiAmount:p(c()),decimals:c(),uiAmountString:A(l())})));se(f(g({pubkey:K,account:g({executable:le(),owner:K,lamports:c(),data:xt,rentEpoch:c()})})));const At=g({program:l(),parsed:Xe(),space:c()});se(f(g({pubkey:K,account:g({executable:le(),owner:K,lamports:c(),data:At,rentEpoch:c()})})));se(f(g({lamports:c(),address:K})));const Wt=g({executable:le(),owner:K,lamports:c(),data:xt,rentEpoch:c()});g({pubkey:K,account:Wt});const pi=Ye(J([It(I.Buffer),At]),J([Nn,At]),t=>Array.isArray(t)?Je(t,xt):t),fi=g({executable:le(),owner:K,lamports:c(),data:pi,rentEpoch:c()});g({pubkey:K,account:fi});g({state:J([U("active"),U("inactive"),U("activating"),U("deactivating")]),active:c(),inactive:c()});z(f(g({signature:l(),slot:c(),err:Ae,memo:p(l()),blockTime:A(p(c()))})));z(f(g({signature:l(),slot:c(),err:Ae,memo:p(l()),blockTime:A(p(c()))})));g({subscription:c(),result:dt(Wt)});const yi=g({pubkey:K,account:Wt});g({subscription:c(),result:dt(yi)});const wi=g({parent:c(),slot:c(),root:c()});g({subscription:c(),result:wi});const ki=J([g({type:J([U("firstShredReceived"),U("completed"),U("optimisticConfirmation"),U("root")]),slot:c(),timestamp:c()}),g({type:U("createdBank"),parent:c(),slot:c(),timestamp:c()}),g({type:U("frozen"),slot:c(),timestamp:c(),stats:g({numTransactionEntries:c(),numSuccessfulTransactions:c(),numFailedTransactions:c(),maxTransactionsPerEntry:c()})}),g({type:U("dead"),slot:c(),timestamp:c(),err:l()})]);g({subscription:c(),result:ki});g({subscription:c(),result:dt(J([hi,li]))});g({subscription:c(),result:c()});g({pubkey:l(),gossip:p(l()),tpu:p(l()),rpc:p(l()),version:p(l())});const sn=g({votePubkey:l(),nodePubkey:l(),activatedStake:c(),epochVoteAccount:le(),epochCredits:f(Ct([c(),c(),c()])),commission:c(),lastVote:c(),rootSlot:p(c())});z(g({current:f(sn),delinquent:f(sn)}));const Si=J([U("processed"),U("confirmed"),U("finalized")]),bi=g({slot:c(),confirmations:p(c()),err:Ae,confirmationStatus:A(Si)});se(f(p(bi)));z(c());const _n=g({accountKey:K,writableIndexes:f(c()),readonlyIndexes:f(c())}),Et=g({signatures:f(l()),message:g({accountKeys:f(l()),header:g({numRequiredSignatures:c(),numReadonlySignedAccounts:c(),numReadonlyUnsignedAccounts:c()}),instructions:f(g({accounts:f(c()),data:l(),programIdIndex:c()})),recentBlockhash:l(),addressTableLookups:A(f(_n))})}),On=g({pubkey:K,signer:le(),writable:le(),source:A(J([U("transaction"),U("lookupTable")]))}),qn=g({accountKeys:f(On),signatures:f(l())}),Ln=g({parsed:Xe(),program:l(),programId:K}),Dn=g({accounts:f(K),data:l(),programId:K}),vi=J([Dn,Ln]),Ai=J([g({parsed:Xe(),program:l(),programId:l()}),g({accounts:f(l()),data:l(),programId:l()})]),Vn=Ye(vi,Ai,t=>"accounts"in t?Je(t,Dn):Je(t,Ln)),$n=g({signatures:f(l()),message:g({accountKeys:f(On),instructions:f(Vn),recentBlockhash:l(),addressTableLookups:A(p(f(_n)))})}),it=g({accountIndex:c(),mint:l(),owner:A(l()),uiTokenAmount:mi}),Hn=g({writable:f(K),readonly:f(K)}),gt=g({err:Ae,fee:c(),innerInstructions:A(p(f(g({index:c(),instructions:f(g({accounts:f(c()),data:l(),programIdIndex:c()}))})))),preBalances:f(c()),postBalances:f(c()),logMessages:A(p(f(l()))),preTokenBalances:A(p(f(it))),postTokenBalances:A(p(f(it))),loadedAddresses:A(Hn),computeUnitsConsumed:A(c())}),Rt=g({err:Ae,fee:c(),innerInstructions:A(p(f(g({index:c(),instructions:f(Vn)})))),preBalances:f(c()),postBalances:f(c()),logMessages:A(p(f(l()))),preTokenBalances:A(p(f(it))),postTokenBalances:A(p(f(it))),loadedAddresses:A(Hn),computeUnitsConsumed:A(c())}),ze=J([U(0),U("legacy")]),Me=g({pubkey:l(),lamports:c(),postBalance:p(c()),rewardType:p(l()),commission:A(p(c()))});z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),transactions:f(g({transaction:Et,meta:p(gt),version:A(ze)})),rewards:A(f(Me)),blockTime:p(c()),blockHeight:p(c())})));z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),rewards:A(f(Me)),blockTime:p(c()),blockHeight:p(c())})));z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),transactions:f(g({transaction:qn,meta:p(gt),version:A(ze)})),rewards:A(f(Me)),blockTime:p(c()),blockHeight:p(c())})));z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),transactions:f(g({transaction:$n,meta:p(Rt),version:A(ze)})),rewards:A(f(Me)),blockTime:p(c()),blockHeight:p(c())})));z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),transactions:f(g({transaction:qn,meta:p(Rt),version:A(ze)})),rewards:A(f(Me)),blockTime:p(c()),blockHeight:p(c())})));z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),rewards:A(f(Me)),blockTime:p(c()),blockHeight:p(c())})));z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),transactions:f(g({transaction:Et,meta:p(gt)})),rewards:A(f(Me)),blockTime:p(c())})));z(p(g({blockhash:l(),previousBlockhash:l(),parentSlot:c(),signatures:f(l()),blockTime:p(c())})));z(p(g({slot:c(),meta:p(gt),blockTime:A(p(c())),transaction:Et,version:A(ze)})));z(p(g({slot:c(),transaction:$n,meta:p(Rt),blockTime:A(p(c())),version:A(ze)})));se(g({blockhash:l(),feeCalculator:g({lamportsPerSignature:c()})}));se(g({blockhash:l(),lastValidBlockHeight:c()}));se(le());const Mi=g({slot:c(),numTransactions:c(),numSlots:c(),samplePeriodSecs:c()});z(f(Mi));se(p(g({feeCalculator:g({lamportsPerSignature:c()})})));z(l());z(l());const Ti=g({err:Ae,logs:f(l()),signature:l()});g({result:dt(Ti),subscription:c()});class fe{constructor(e){this._keypair=void 0,this._keypair=e??en()}static generate(){return new fe(en())}static fromSecretKey(e,n){if(e.byteLength!==64)throw new Error("bad secret key size");const r=e.slice(32,64);if(!n||!n.skipValidation){const i=e.slice(0,32),o=bt(i);for(let s=0;s<32;s++)if(r[s]!==o[s])throw new Error("provided secretKey is invalid")}return new fe({publicKey:r,secretKey:e})}static fromSeed(e){const n=bt(e),r=new Uint8Array(64);return r.set(e),r.set(n,32),new fe({publicKey:n,secretKey:r})}get publicKey(){return new d(this._keypair.publicKey)}get secretKey(){return new Uint8Array(this._keypair.secretKey)}}Object.freeze({CreateLookupTable:{index:0,layout:m([w("instruction"),Ee("recentSlot"),x("bumpSeed")])},FreezeLookupTable:{index:1,layout:m([w("instruction")])},ExtendLookupTable:{index:2,layout:m([w("instruction"),Ee(),he(P(),xe(w(),-8),"addresses")])},DeactivateLookupTable:{index:3,layout:m([w("instruction")])},CloseLookupTable:{index:4,layout:m([w("instruction")])}});new d("AddressLookupTab1e1111111111111111111111111");Object.freeze({RequestUnits:{index:0,layout:m([x("instruction"),w("units"),w("additionalFee")])},RequestHeapFrame:{index:1,layout:m([x("instruction"),w("bytes")])},SetComputeUnitLimit:{index:2,layout:m([x("instruction"),w("units")])},SetComputeUnitPrice:{index:3,layout:m([x("instruction"),Ee("microLamports")])}});new d("ComputeBudget111111111111111111111111111111");m([x("numSignatures"),x("padding"),ne("signatureOffset"),ne("signatureInstructionIndex"),ne("publicKeyOffset"),ne("publicKeyInstructionIndex"),ne("messageDataOffset"),ne("messageDataSize"),ne("messageInstructionIndex")]);new d("Ed25519SigVerify111111111111111111111111111");Mn.utils.isValidPrivateKey;Mn.getPublicKey;m([x("numSignatures"),ne("signatureOffset"),x("signatureInstructionIndex"),ne("ethAddressOffset"),x("ethAddressInstructionIndex"),ne("messageDataOffset"),ne("messageDataSize"),x("messageInstructionIndex"),re(20,"ethAddress"),re(64,"signature"),x("recoveryId")]);new d("KeccakSecp256k11111111111111111111111111111");var jn;new d("StakeConfig11111111111111111111111111111111");class Jn{constructor(e,n,r){this.unixTimestamp=void 0,this.epoch=void 0,this.custodian=void 0,this.unixTimestamp=e,this.epoch=n,this.custodian=r}}jn=Jn;Jn.default=new jn(0,0,d.default);Object.freeze({Initialize:{index:0,layout:m([w("instruction"),Gr(),Zr()])},Authorize:{index:1,layout:m([w("instruction"),P("newAuthorized"),w("stakeAuthorizationType")])},Delegate:{index:2,layout:m([w("instruction")])},Split:{index:3,layout:m([w("instruction"),j("lamports")])},Withdraw:{index:4,layout:m([w("instruction"),j("lamports")])},Deactivate:{index:5,layout:m([w("instruction")])},Merge:{index:7,layout:m([w("instruction")])},AuthorizeWithSeed:{index:8,layout:m([w("instruction"),P("newAuthorized"),w("stakeAuthorizationType"),Pe("authoritySeed"),P("authorityOwner")])}});new d("Stake11111111111111111111111111111111111111");Object.freeze({InitializeAccount:{index:0,layout:m([w("instruction"),Qr()])},Authorize:{index:1,layout:m([w("instruction"),P("newAuthorized"),w("voteAuthorizationType")])},Withdraw:{index:3,layout:m([w("instruction"),j("lamports")])},UpdateValidatorIdentity:{index:4,layout:m([w("instruction")])},AuthorizeWithSeed:{index:10,layout:m([w("instruction"),Xr()])}});new d("Vote111111111111111111111111111111111111111");new d("Va1idator1nfo111111111111111111111111111111");g({name:l(),website:A(l()),details:A(l()),keybaseUsername:A(l())});new d("Vote111111111111111111111111111111111111111");m([P("nodePubkey"),P("authorizedWithdrawer"),x("commission"),V(),he(m([V("slot"),w("confirmationCount")]),xe(w(),-8),"votes"),x("rootSlotValid"),V("rootSlot"),V(),he(m([V("epoch"),P("authorizedVoter")]),xe(w(),-8),"authorizedVoters"),m([he(m([P("authorizedPubkey"),V("epochOfLastAuthorizedSwitch"),V("targetEpoch")]),32,"buf"),V("idx"),x("isEmpty")],"priorVoters"),V(),he(m([V("epoch"),V("credits"),V("prevCredits")]),xe(w(),-8),"epochCredits"),m([V("slot"),V("timestamp")],"lastTimestamp")]);const F=new d("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");new d("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");const ht=new d("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),pe=new d("So11111111111111111111111111111111111111112");new d("9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP");class Ue extends Error{constructor(e){super(e)}}class zt extends Ue{constructor(){super(...arguments),this.name="TokenAccountNotFoundError"}}class Bi extends Ue{constructor(){super(...arguments),this.name="TokenInvalidAccountError"}}class Gn extends Ue{constructor(){super(...arguments),this.name="TokenInvalidAccountOwnerError"}}class je extends Ue{constructor(){super(...arguments),this.name="TokenInvalidAccountSizeError"}}class Ii extends Ue{constructor(){super(...arguments),this.name="TokenInvalidMintError"}}class Zn extends Ue{constructor(){super(...arguments),this.name="TokenOwnerOffCurveError"}}var Re;(function(t){t[t.InitializeMint=0]="InitializeMint",t[t.InitializeAccount=1]="InitializeAccount",t[t.InitializeMultisig=2]="InitializeMultisig",t[t.Transfer=3]="Transfer",t[t.Approve=4]="Approve",t[t.Revoke=5]="Revoke",t[t.SetAuthority=6]="SetAuthority",t[t.MintTo=7]="MintTo",t[t.Burn=8]="Burn",t[t.CloseAccount=9]="CloseAccount",t[t.FreezeAccount=10]="FreezeAccount",t[t.ThawAccount=11]="ThawAccount",t[t.TransferChecked=12]="TransferChecked",t[t.ApproveChecked=13]="ApproveChecked",t[t.MintToChecked=14]="MintToChecked",t[t.BurnChecked=15]="BurnChecked",t[t.InitializeAccount2=16]="InitializeAccount2",t[t.SyncNative=17]="SyncNative",t[t.InitializeAccount3=18]="InitializeAccount3",t[t.InitializeMultisig2=19]="InitializeMultisig2",t[t.InitializeMint2=20]="InitializeMint2",t[t.GetAccountDataSize=21]="GetAccountDataSize",t[t.InitializeImmutableOwner=22]="InitializeImmutableOwner",t[t.AmountToUiAmount=23]="AmountToUiAmount",t[t.UiAmountToAmount=24]="UiAmountToAmount",t[t.InitializeMintCloseAuthority=25]="InitializeMintCloseAuthority",t[t.TransferFeeExtension=26]="TransferFeeExtension",t[t.ConfidentialTransferExtension=27]="ConfidentialTransferExtension",t[t.DefaultAccountStateExtension=28]="DefaultAccountStateExtension",t[t.Reallocate=29]="Reallocate",t[t.MemoTransferExtension=30]="MemoTransferExtension",t[t.CreateNativeMint=31]="CreateNativeMint",t[t.InitializeNonTransferableMint=32]="InitializeNonTransferableMint",t[t.InterestBearingMintExtension=33]="InterestBearingMintExtension",t[t.CpiGuardExtension=34]="CpiGuardExtension",t[t.InitializePermanentDelegate=35]="InitializePermanentDelegate",t[t.TransferHookExtension=36]="TransferHookExtension",t[t.MetadataPointerExtension=39]="MetadataPointerExtension"})(Re||(Re={}));function Ut(t,e,n){if(n.length){t.push({pubkey:e,isSigner:!1,isWritable:!1});for(const r of n)t.push({pubkey:r instanceof d?r:r.publicKey,isSigner:!0,isWritable:!1})}else t.push({pubkey:e,isSigner:!0,isWritable:!1});return t}const an=m([x("instruction"),ce("amount")]);function Ci(t,e,n,r,i=[],o=F){const s=Ut([{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:e,isSigner:!1,isWritable:!1}],n,i),a=v.Buffer.alloc(an.span);return an.encode({instruction:Re.Approve,amount:BigInt(r)},a),new $({keys:s,programId:o,data:a})}const cn=m([x("instruction")]);function un(t,e,n,r=[],i=F){const o=Ut([{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:e,isSigner:!1,isWritable:!0}],n,r),s=v.Buffer.alloc(cn.span);return cn.encode({instruction:Re.CloseAccount},s),new $({keys:o,programId:i,data:s})}var ot;(function(t){t[t.Uninitialized=0]="Uninitialized",t[t.Mint=1]="Mint",t[t.Account=2]="Account"})(ot||(ot={}));const Ft=1,Pi=m([x("m"),x("n"),ke("isInitialized"),R("signer1"),R("signer2"),R("signer3"),R("signer4"),R("signer5"),R("signer6"),R("signer7"),R("signer8"),R("signer9"),R("signer10"),R("signer11")]),Nt=Pi.span;var st;(function(t){t[t.Uninitialized=0]="Uninitialized",t[t.Initialized=1]="Initialized",t[t.Frozen=2]="Frozen"})(st||(st={}));const Qn=m([R("mint"),R("owner"),ce("amount"),w("delegateOption"),R("delegate"),x("state"),w("isNativeOption"),ce("isNative"),ce("delegatedAmount"),w("closeAuthorityOption"),R("closeAuthority")]),ie=Qn.span;async function xi(t,e,n,r=F){const i=await t.getAccountInfo(e,n);return Ei(e,i,r)}async function dn(t,e){return await Wi(t,[],e)}async function Wi(t,e,n){const r=lo(e);return await t.getMinimumBalanceForRentExemption(r,n)}function Ei(t,e,n=F){if(!e)throw new zt;if(!e.owner.equals(n))throw new Gn;if(e.data.length<ie)throw new je;const r=Qn.decode(e.data.slice(0,ie));let i=v.Buffer.alloc(0);if(e.data.length>ie){if(e.data.length===Nt)throw new je;if(e.data[ie]!=ot.Account)throw new Bi;i=e.data.slice(ie+Ft)}return{address:t,mint:r.mint,owner:r.owner,amount:r.amount,delegate:r.delegateOption?r.delegate:null,delegatedAmount:r.delegatedAmount,isInitialized:r.state!==st.Uninitialized,isFrozen:r.state===st.Frozen,isNative:!!r.isNativeOption,rentExemptReserve:r.isNativeOption?r.isNative:null,closeAuthority:r.closeAuthorityOption?r.closeAuthority:null,tlvData:i}}const Xn=m([w("mintAuthorityOption"),R("mintAuthority"),ce("supply"),x("decimals"),ke("isInitialized"),w("freezeAuthorityOption"),R("freezeAuthority")]),kt=Xn.span;async function Ri(t,e,n,r=F){const i=await t.getAccountInfo(e,n);return zi(e,i,r)}function zi(t,e,n=F){if(!e)throw new zt;if(!e.owner.equals(n))throw new Gn;if(e.data.length<kt)throw new je;const r=Xn.decode(e.data.slice(0,kt));let i=v.Buffer.alloc(0);if(e.data.length>kt){if(e.data.length<=ie)throw new je;if(e.data.length===Nt)throw new je;if(e.data[ie]!=ot.Mint)throw new Ii;i=e.data.slice(ie+Ft)}return{address:t,mintAuthority:r.mintAuthorityOption?r.mintAuthority:null,supply:r.supply,decimals:r.decimals,isInitialized:r.isInitialized,freezeAuthority:r.freezeAuthorityOption?r.freezeAuthority:null,tlvData:i}}async function gn(t,e,n=!1,r=F,i=ht){if(!n&&!d.isOnCurve(e.toBuffer()))throw new Zn;const[o]=await d.findProgramAddress([e.toBuffer(),r.toBuffer(),t.toBuffer()],i);return o}function Kt(t,e,n=!1,r=F,i=ht){if(!n&&!d.isOnCurve(e.toBuffer()))throw new Zn;const[o]=d.findProgramAddressSync([e.toBuffer(),r.toBuffer(),t.toBuffer()],i);return o}const Ui=m([ke("lockCpi")]),Fi=Ui.span,Ni=m([x("state")]),Ki=Ni.span,_i=m([]),Oi=_i.span,qi=m([R("rateAuthority"),j("initializationTimestamp"),Qt("preUpdateAverageRate"),j("lastUpdateTimestamp"),Qt("currentRate")]),Li=qi.span,Di=m([ke("requireIncomingTransferMemos")]),Vi=Di.span,$i=m([R("authority"),R("metadataAddress")]),Hi=$i.span,ji=m([R("closeAuthority")]),Ji=ji.span,Yn=m([]),Gi=Yn.span,Zi=Yn.span,Qi=m([R("delegate")]),Xi=Qi.span,Yi=1e4;BigInt(Yi);function hn(t){return m([ce("epoch"),ce("maximumFee"),ne("transferFeeBasisPoints")],t)}const eo=m([R("transferFeeConfigAuthority"),R("withdrawWithheldAuthority"),ce("withheldAmount"),hn("olderTransferFee"),hn("newerTransferFee")]),to=eo.span,no=m([ce("withheldAmount")]),ro=no.span,io=m([R("authority"),R("programId")]),oo=io.span,so=m([ke("transferring")]),ao=so.span,ln=m([x("discriminator"),re(32,"addressConfig"),ke("isSigner"),ke("isWritable")]),co=m([w("count"),he(ln,Ar(ln.span),"extraAccounts")]);m([ce("instructionDiscriminator"),w("length"),co.replicate("extraAccountsList")]);var N;(function(t){t[t.Uninitialized=0]="Uninitialized",t[t.TransferFeeConfig=1]="TransferFeeConfig",t[t.TransferFeeAmount=2]="TransferFeeAmount",t[t.MintCloseAuthority=3]="MintCloseAuthority",t[t.ConfidentialTransferMint=4]="ConfidentialTransferMint",t[t.ConfidentialTransferAccount=5]="ConfidentialTransferAccount",t[t.DefaultAccountState=6]="DefaultAccountState",t[t.ImmutableOwner=7]="ImmutableOwner",t[t.MemoTransfer=8]="MemoTransfer",t[t.NonTransferable=9]="NonTransferable",t[t.InterestBearingConfig=10]="InterestBearingConfig",t[t.CpiGuard=11]="CpiGuard",t[t.PermanentDelegate=12]="PermanentDelegate",t[t.NonTransferableAccount=13]="NonTransferableAccount",t[t.TransferHook=14]="TransferHook",t[t.TransferHookAccount=15]="TransferHookAccount",t[t.MetadataPointer=18]="MetadataPointer"})(N||(N={}));const mn=2,uo=2;function go(t){switch(t){case N.Uninitialized:return 0;case N.TransferFeeConfig:return to;case N.TransferFeeAmount:return ro;case N.MintCloseAuthority:return Ji;case N.ConfidentialTransferMint:return 97;case N.ConfidentialTransferAccount:return 286;case N.CpiGuard:return Fi;case N.DefaultAccountState:return Ki;case N.ImmutableOwner:return Oi;case N.MemoTransfer:return Vi;case N.MetadataPointer:return Hi;case N.NonTransferable:return Gi;case N.InterestBearingConfig:return Li;case N.PermanentDelegate:return Xi;case N.NonTransferableAccount:return Zi;case N.TransferHook:return oo;case N.TransferHookAccount:return ao;default:throw Error(`Unknown extension type: ${t}`)}}function ho(t,e){if(t.length===0)return e;{const n=ie+Ft+t.filter((r,i)=>i===t.indexOf(r)).map(r=>go(r)+mn+uo).reduce((r,i)=>r+i);return n===Nt?n+mn:n}}function lo(t){return ho(t,ie)}const pn=m([x("instruction")]);function fn(t,e,n,r=F){const i=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:e,isSigner:!1,isWritable:!1},{pubkey:n,isSigner:!1,isWritable:!1},{pubkey:oe,isSigner:!1,isWritable:!1}],o=v.Buffer.alloc(pn.span);return pn.encode({instruction:Re.InitializeAccount},o),new $({keys:i,programId:r,data:o})}function er(t,e,n,r,i=F,o=ht){return mo(t,e,n,r,v.Buffer.alloc(0),i,o)}function mo(t,e,n,r,i,o=F,s=ht){const a=[{pubkey:t,isSigner:!0,isWritable:!0},{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!1,isWritable:!1},{pubkey:D.programId,isSigner:!1,isWritable:!1},{pubkey:o,isSigner:!1,isWritable:!1}];return new $({keys:a,programId:s,data:i})}const yn=m([x("instruction"),ce("amount")]);function po(t,e,n,r,i=[],o=F){const s=Ut([{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:e,isSigner:!1,isWritable:!0}],n,i),a=v.Buffer.alloc(yn.span);return yn.encode({instruction:Re.Transfer,amount:BigInt(r)},a),new $({keys:s,programId:o,data:a})}function _t(t,e){const n=v.Buffer.alloc(2);return n.writeUInt16BE(E(e)),O([v.Buffer.from("foreign_contract"),n],t)}function fo(t){return O([v.Buffer.from("redeemer")],t)}function Ot(t,e){return O([v.Buffer.from("mint"),new d(e).toBuffer()],t)}function tr(t){return O([v.Buffer.from("sender")],t)}function nr(t,e){return O([v.Buffer.from("tmp"),new d(e).toBuffer()],t)}function rr(t,e,n){return O([v.Buffer.from("bridged"),new d(e).toBuffer(),v.Buffer.from(Mr.toBytes(BigInt(n.toString()),8))],t)}function G(t){return O([v.Buffer.from("config")],t)}async function as(t,e,n){return t.getAccountInfo(G(e),n).then(r=>qt.deserialize(ct(r)))}class qt{constructor(e){T(this,"wormhole"),this.wormhole=new d(e)}static deserialize(e){if(e.length!=32)throw new Error("data.length != 32");const n=e.subarray(0,32);return new qt(n)}}function lt(t,e){return O([new d(e).toBuffer()],t)}function Fe(t,e,n){if(e==E("Solana"))throw new Error("emitterChain == CHAIN_ID_SOLANA cannot exist as foreign token bridge emitter");const r=typeof n=="string"?new Tn(n).toUint8Array():n;return O([(()=>{const i=v.Buffer.alloc(2);return i.writeUInt16BE(e),i})(),r],t)}async function cs(t,e,n){return t.getAccountInfo(new d(e),n).then(r=>Lt.deserialize(ct(r)))}class Lt{constructor(e,n){T(this,"chain"),T(this,"contract"),this.chain=e,this.contract=n}static deserialize(e){if(e.length!=34)throw new Error("data.length != 34");const n=e.readUInt16LE(0),r=e.subarray(2,34);return new Lt(n,r)}}function Dt(t){return O([v.Buffer.from("sender")],t)}function Vt(t){return O([v.Buffer.from("redeemer")],t)}function Ne(t){return O([v.Buffer.from("authority_signer")],t)}function et(t){return O([v.Buffer.from("custody_signer")],t)}function mt(t){return O([v.Buffer.from("mint_signer")],t)}function Ke(t,e,n){if(e==E("Solana"))throw new Error("tokenChain == CHAIN_ID_SOLANA does not have wrapped mint key");return O([v.Buffer.from("wrapped"),(()=>{const r=v.Buffer.alloc(2);return r.writeUInt16BE(e),r})(),n],t)}function Te(t,e){return O([v.Buffer.from("meta"),new d(e).toBuffer()],t)}async function rt(t,e,n,r){return t.getAccountInfo(Te(e,n),r).then(i=>$t.deserialize(ct(i)))}class $t{constructor(e,n,r,i){T(this,"chain"),T(this,"tokenAddress"),T(this,"originalDecimals"),T(this,"lastUpdatedSequence"),this.chain=e,this.tokenAddress=n,this.originalDecimals=r,this.lastUpdatedSequence=i}static deserialize(e){if(e.length!==35&&e.length!==43)throw new Error(`invalid wrapped meta length: ${e.length}`);const n=e.readUInt16LE(0),r=e.subarray(2,34),i=e.readUInt8(34),o=e.length===43?e.readBigUInt64LE(35):void 0;return new $t(n,r,i,o)}}function wn(t,e,n,r){return Ci(new d(e),Ne(t),new d(n),r)}class yo{constructor(e){T(this,"idl"),this.idl=e}async encode(e,n){switch(e){default:throw new Error(`Invalid account name: ${e}`)}}decode(e,n){return this.decodeUnchecked(e,n)}decodeUnchecked(e,n){switch(e){default:throw new Error(`Invalid account name: ${e}`)}}memcmp(e,n){switch(e){default:throw new Error(`Invalid account name: ${e}`)}}size(e){return vr(this.idl,e)??0}}class wo{constructor(e){}decode(e){throw new Error("Token Bridge program does not have events")}}class ko{constructor(e){}encode(e,n){switch(e){case"initialize":return So(n);case"attestToken":return bo(n);case"completeNative":return vo(n);case"completeWrapped":return Ao(n);case"transferWrapped":return Mo(n);case"transferNative":return To(n);case"registerChain":return Bo(n);case"createWrapped":return Io(n);case"upgradeContract":return Co(n);case"transferWrappedWithPayload":return Po(n);case"transferNativeWithPayload":return xo(n);default:throw new Error(`Invalid instruction: ${e}`)}}encodeState(e,n){throw new Error("Token Bridge program does not have state")}}var Y;(function(t){t[t.Initialize=0]="Initialize",t[t.AttestToken=1]="AttestToken",t[t.CompleteNative=2]="CompleteNative",t[t.CompleteWrapped=3]="CompleteWrapped",t[t.TransferWrapped=4]="TransferWrapped",t[t.TransferNative=5]="TransferNative",t[t.RegisterChain=6]="RegisterChain",t[t.CreateWrapped=7]="CreateWrapped",t[t.UpgradeContract=8]="UpgradeContract",t[t.CompleteNativeWithPayload=9]="CompleteNativeWithPayload",t[t.CompleteWrappedWithPayload=10]="CompleteWrappedWithPayload",t[t.TransferWrappedWithPayload=11]="TransferWrappedWithPayload",t[t.TransferNativeWithPayload=12]="TransferNativeWithPayload"})(Y||(Y={}));function de(t,e){const n=e===void 0?0:e.length,r=v.Buffer.alloc(1+n);return r.writeUInt8(t,0),n>0&&r.write(e.toString("hex"),1,"hex"),r}function So({wormhole:t}){const e=v.Buffer.alloc(32);return e.write(new d(t).toBuffer().toString("hex"),0,"hex"),de(Y.Initialize,e)}function bo({nonce:t}){const e=v.Buffer.alloc(4);return e.writeUInt32LE(t,0),de(Y.AttestToken,e)}function vo({}){return de(Y.CompleteNative)}function Ao({}){return de(Y.CompleteWrapped)}function ir({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i}){if(typeof e!="bigint"&&(e=BigInt(e)),typeof n!="bigint"&&(n=BigInt(n)),!v.Buffer.isBuffer(r))throw new Error("targetAddress must be Buffer");const o=v.Buffer.alloc(54);return o.writeUInt32LE(t,0),o.writeBigUInt64LE(e,4),o.writeBigUInt64LE(n,12),o.write(r.toString("hex"),20,"hex"),o.writeUInt16LE(i,52),o}function Mo({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i}){return de(Y.TransferWrapped,ir({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i}))}function To({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i}){return de(Y.TransferNative,ir({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i}))}function Bo({}){return de(Y.RegisterChain)}function Io({}){return de(Y.CreateWrapped)}function Co({}){return de(Y.UpgradeContract)}function or({nonce:t,amount:e,targetAddress:n,targetChain:r,payload:i}){if(typeof e!="bigint"&&(e=BigInt(e)),!v.Buffer.isBuffer(n))throw new Error("targetAddress must be Buffer");if(!v.Buffer.isBuffer(i))throw new Error("payload must be Buffer");const o=v.Buffer.alloc(50);return o.writeUInt32LE(t,0),o.writeBigUInt64LE(e,4),o.write(n.toString("hex"),12,"hex"),o.writeUInt16LE(r,44),o.writeUInt32LE(i.length,46),v.Buffer.concat([o,i,v.Buffer.alloc(1)])}function Po({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i,payload:o}){return de(Y.TransferWrappedWithPayload,or({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i,payload:o}))}function xo({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i,payload:o}){return de(Y.TransferNativeWithPayload,or({nonce:t,amount:e,fee:n,targetAddress:r,targetChain:i,payload:o}))}class Wo{constructor(e){}encode(e,n){throw new Error("Token Bridge program does not have state")}decode(e){throw new Error("Token Bridge program does not have state")}}class Eo{constructor(e){}encode(e,n){throw new Error("Token Bridge program does not have user-defined types")}decode(e,n){throw new Error("Token Bridge program does not have user-defined types")}}class Ro{constructor(e){T(this,"instruction"),T(this,"accounts"),T(this,"state"),T(this,"events"),T(this,"types"),this.instruction=new ko(e),this.accounts=new yo(e),this.state=new Wo(e),this.events=new wo(e),this.types=new Eo(e)}}const sr={version:"0.1.0",name:"wormhole",instructions:[{name:"initialize",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!0,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1}],args:[{name:"wormhole",type:"publicKey"}]},{name:"attestToken",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!0,isSigner:!1},{name:"mint",isMut:!1,isSigner:!1},{name:"wrappedMeta",isMut:!1,isSigner:!1},{name:"splMetadata",isMut:!1,isSigner:!1},{name:"wormholeBridge",isMut:!0,isSigner:!1},{name:"wormholeMessage",isMut:!0,isSigner:!0},{name:"wormholeEmitter",isMut:!1,isSigner:!1},{name:"wormholeSequence",isMut:!0,isSigner:!1},{name:"wormholeFeeCollector",isMut:!0,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[{name:"nonce",type:"u32"}]},{name:"completeNative",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"vaa",isMut:!1,isSigner:!1},{name:"claim",isMut:!0,isSigner:!1},{name:"endpoint",isMut:!1,isSigner:!1},{name:"to",isMut:!0,isSigner:!1},{name:"toFees",isMut:!0,isSigner:!1},{name:"custody",isMut:!0,isSigner:!1},{name:"mint",isMut:!1,isSigner:!1},{name:"custodySigner",isMut:!1,isSigner:!1},{name:"rent",isMut:!0,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[]},{name:"completeWrapped",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"vaa",isMut:!1,isSigner:!1},{name:"claim",isMut:!0,isSigner:!1},{name:"endpoint",isMut:!1,isSigner:!1},{name:"to",isMut:!0,isSigner:!1},{name:"toFees",isMut:!0,isSigner:!1},{name:"mint",isMut:!0,isSigner:!1},{name:"wrappedMeta",isMut:!1,isSigner:!1},{name:"mintAuthority",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[]},{name:"transferWrapped",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"from",isMut:!0,isSigner:!1},{name:"fromOwner",isMut:!0,isSigner:!0},{name:"mint",isMut:!0,isSigner:!1},{name:"wrappedMeta",isMut:!1,isSigner:!1},{name:"authoritySigner",isMut:!1,isSigner:!1},{name:"wormholeBridge",isMut:!0,isSigner:!1},{name:"wormholeMessage",isMut:!0,isSigner:!0},{name:"wormholeEmitter",isMut:!1,isSigner:!1},{name:"wormholeSequence",isMut:!0,isSigner:!1},{name:"wormholeFeeCollector",isMut:!0,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[{name:"nonce",type:"u32"},{name:"amount",type:"u64"},{name:"fee",type:"u64"},{name:"targetAddress",type:{array:["u8",32]}},{name:"targetChain",type:"u16"}]},{name:"transferNative",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"from",isMut:!0,isSigner:!1},{name:"mint",isMut:!0,isSigner:!1},{name:"custody",isMut:!0,isSigner:!1},{name:"authoritySigner",isMut:!1,isSigner:!1},{name:"custodySigner",isMut:!1,isSigner:!1},{name:"wormholeBridge",isMut:!0,isSigner:!1},{name:"wormholeMessage",isMut:!0,isSigner:!0},{name:"wormholeEmitter",isMut:!1,isSigner:!1},{name:"wormholeSequence",isMut:!0,isSigner:!1},{name:"wormholeFeeCollector",isMut:!0,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[{name:"nonce",type:"u32"},{name:"amount",type:"u64"},{name:"fee",type:"u64"},{name:"targetAddress",type:{array:["u8",32]}},{name:"targetChain",type:"u16"}]},{name:"registerChain",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"endpoint",isMut:!0,isSigner:!1},{name:"vaa",isMut:!1,isSigner:!1},{name:"claim",isMut:!0,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[]},{name:"createWrapped",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"endpoint",isMut:!1,isSigner:!1},{name:"vaa",isMut:!1,isSigner:!1},{name:"claim",isMut:!0,isSigner:!1},{name:"mint",isMut:!0,isSigner:!1},{name:"wrappedMeta",isMut:!0,isSigner:!1},{name:"splMetadata",isMut:!0,isSigner:!1},{name:"mintAuthority",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"splMetadataProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[]},{name:"upgradeContract",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"vaa",isMut:!1,isSigner:!1},{name:"claim",isMut:!0,isSigner:!1},{name:"upgradeAuthority",isMut:!1,isSigner:!1},{name:"spill",isMut:!0,isSigner:!1},{name:"implementation",isMut:!0,isSigner:!1},{name:"programData",isMut:!0,isSigner:!1},{name:"tokenBridgeProgram",isMut:!0,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"bpfLoaderUpgradeable",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1}],args:[]},{name:"transferWrappedWithPayload",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"from",isMut:!0,isSigner:!1},{name:"fromOwner",isMut:!0,isSigner:!0},{name:"mint",isMut:!0,isSigner:!1},{name:"wrappedMeta",isMut:!1,isSigner:!1},{name:"authoritySigner",isMut:!1,isSigner:!1},{name:"wormholeBridge",isMut:!0,isSigner:!1},{name:"wormholeMessage",isMut:!0,isSigner:!0},{name:"wormholeEmitter",isMut:!1,isSigner:!1},{name:"wormholeSequence",isMut:!0,isSigner:!1},{name:"wormholeFeeCollector",isMut:!0,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"sender",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[{name:"nonce",type:"u32"},{name:"amount",type:"u64"},{name:"targetAddress",type:{array:["u8",32]}},{name:"targetChain",type:"u16"},{name:"payload",type:"bytes"},{name:"cpiProgramId",type:{option:"publicKey"}}]},{name:"transferNativeWithPayload",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"config",isMut:!1,isSigner:!1},{name:"from",isMut:!0,isSigner:!1},{name:"mint",isMut:!0,isSigner:!1},{name:"custody",isMut:!0,isSigner:!1},{name:"authoritySigner",isMut:!1,isSigner:!1},{name:"custodySigner",isMut:!1,isSigner:!1},{name:"wormholeBridge",isMut:!0,isSigner:!1},{name:"wormholeMessage",isMut:!0,isSigner:!0},{name:"wormholeEmitter",isMut:!1,isSigner:!1},{name:"wormholeSequence",isMut:!0,isSigner:!1},{name:"wormholeFeeCollector",isMut:!0,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"sender",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1}],args:[{name:"nonce",type:"u32"},{name:"amount",type:"u64"},{name:"targetAddress",type:{array:["u8",32]}},{name:"targetChain",type:"u16"},{name:"payload",type:"bytes"},{name:"cpiProgramId",type:{option:"publicKey"}}]}],accounts:[]};function zo(t,e){return new Bn(sr,new d(t),e===void 0?{connection:null}:e,Uo())}function ae(t,e){return zo(t,Er(e))}function Uo(){return new Ro(sr)}const ar=class Mt{constructor(e,n,r){T(this,"address"),T(this,"verified"),T(this,"share"),this.address=new d(e),this.verified=n,this.share=r}serialize(){const e=v.Buffer.alloc(Mt.size);return e.write(this.address.toBuffer().toString("hex"),0,"hex"),this.verified&&e.writeUInt8(1,32),e.writeUInt8(this.share,33),e}static deserialize(e){const n=e.subarray(0,32),r=e.readUInt8(32)>0,i=e.readUInt8(33);return new Mt(n,r,i)}};T(ar,"size",34);let Oe=ar;class pt{constructor(e,n,r,i,o){T(this,"name"),T(this,"symbol"),T(this,"uri"),T(this,"sellerFeeBasisPoints"),T(this,"creators"),this.name=e,this.symbol=n,this.uri=r,this.sellerFeeBasisPoints=i,this.creators=o}serialize(){const e=this.name.length,n=this.symbol.length,r=this.uri.length,i=this.creators,[o,s]=(()=>{if(i===null)return[0,0];const u=i.length;return[u,4+u*Oe.size]})(),a=v.Buffer.alloc(15+e+n+r+s);if(a.writeUInt32LE(e,0),a.write(this.name,4),a.writeUInt32LE(n,4+e),a.write(this.symbol,8+e),a.writeUInt32LE(r,8+e+n),a.write(this.uri,12+e+n),a.writeUInt16LE(this.sellerFeeBasisPoints,12+e+n+r),i===null)a.writeUInt8(0,14+e+n+r);else{a.writeUInt8(1,14+e+n+r),a.writeUInt32LE(o,15+e+n+r);for(let u=0;u<o;++u){const h=i.at(u),S=19+e+n+r+u*Oe.size;a.write(h.serialize().toString("hex"),S,"hex")}}return a}static deserialize(e){const n=e.readUInt32LE(0),r=e.subarray(4,4+n).toString(),i=e.readUInt32LE(4+n),o=e.subarray(8+n,8+n+i).toString(),s=e.readUInt32LE(8+n+i),a=e.subarray(12+n+i,12+n+i+s).toString(),u=e.readUInt16LE(12+n+i+s),h=e.readUInt8(14+n+i+s),S=(()=>{if(h==0)return null;const k=[],b=e.readUInt32LE(15+n+i+s);for(let M=0;M<b;++M){const B=19+n+i+s+M*Oe.size;k.push(Oe.deserialize(e.subarray(B,B+Oe.size)))}return k})();return new pt(r,o,a,u,S)}}class at extends pt{constructor(e,n,r,i,o,s){super(e,n,r,i,o),T(this,"isMutable"),this.isMutable=s}static serialize(e,n,r,i,o,s){return new at(e,n,r,i,o,s).serialize()}static serializeInstructionData(e,n,r,i,o,s){return v.Buffer.concat([v.Buffer.alloc(1,0),at.serialize(e,n,r,i,o,s)])}serialize(){return v.Buffer.concat([super.serialize(),v.Buffer.alloc(1,this.isMutable?1:0)])}}const cr=class ur{constructor(){}static createMetadataAccounts(e,n,r,i,o,s,a=!1,u,h,S,k=!1,b=ft(n)){const M=[br(b,!1),Be(n,!1),Be(r,!0),Be(e,!0),Be(s,a),Be(D.programId,!1),Be(oe,!1)],B=at.serializeInstructionData(i,o,u===void 0?"":u,S===void 0?0:S,h===void 0?null:h,k);return{programId:ur.programId,keys:M,data:B}}};T(cr,"programId",new d("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"));let Tt=cr;function ft(t){return O([v.Buffer.from("metadata"),Tt.programId.toBuffer(),new d(t).toBuffer()],Tt.programId)}var kn;(function(t){t[t.Uninitialized=0]="Uninitialized",t[t.EditionV1=1]="EditionV1",t[t.MasterEditionV1=2]="MasterEditionV1",t[t.ReservationListV1=3]="ReservationListV1",t[t.MetadataV1=4]="MetadataV1",t[t.ReservationListV2=5]="ReservationListV2",t[t.MasterEditionV2=6]="MasterEditionV2",t[t.EditionMarker=7]="EditionMarker"})(kn||(kn={}));class Ht{constructor(e,n,r,i,o,s){T(this,"key"),T(this,"updateAuthority"),T(this,"mint"),T(this,"data"),T(this,"primarySaleHappened"),T(this,"isMutable"),this.key=e,this.updateAuthority=new d(n),this.mint=new d(r),this.data=i,this.primarySaleHappened=o,this.isMutable=s}static deserialize(e){const n=e.readUInt8(0),r=e.subarray(1,33),i=e.subarray(33,65),o=pt.deserialize(e.subarray(65)),s=o.serialize().length,a=e.readUInt8(65+s)>0,u=e.readUInt8(66+s)>0;return new Ht(n,r,i,o,a,u)}}async function us(t,e,n){return t.getAccountInfo(ft(e),n).then(r=>Ht.deserialize(ct(r)))}function Fo(t,e,n,r,i,o,s){const a=ae(e,t).methods.attestToken(s);return console.log(Sn(e,n,r,i,o)),a._ixFn(...a._args,{accounts:Sn(e,n,r,i,o),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function Sn(t,e,n,r,i){const{bridge:o,emitter:s,sequence:a,feeCollector:u,clock:h,rent:S,systemProgram:k}=lr(e,n,i,t);return{payer:new d(n),config:G(t),mint:new d(r),wrappedMeta:Te(t,r),splMetadata:ft(r),wormholeBridge:o,wormholeMessage:new d(i),wormholeEmitter:s,wormholeSequence:a,wormholeFeeCollector:u,clock:h,rent:S,systemProgram:k,wormholeProgram:new d(e)}}function bn(t,e,n,r,i,o){const s=ae(e,t).methods.completeNative();return s._ixFn(...s._args,{accounts:No(e,n,r,i,o),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function No(t,e,n,r,i){const o=new d(r.payload.token.address.toUint8Array());return{payer:new d(n),config:G(t),vaa:Se(e,v.Buffer.from(r.hash)),claim:be(t,r.emitterAddress.toUint8Array(),E(r.emitterChain),r.sequence),endpoint:Fe(t,E(r.emitterChain),r.emitterAddress.toUint8Array()),to:new d(r.payload.to.address.toUint8Array()),toFees:new d(i===void 0?r.payload.to.address.toUint8Array():i),custody:lt(t,o),mint:o,custodySigner:et(t),rent:oe,systemProgram:D.programId,tokenProgram:F,wormholeProgram:new d(e)}}function Ko(t,e,n,r,i,o){const s=ae(e,t).methods.completeWrapped();return s._ixFn(...s._args,{accounts:_o(e,n,r,i,o),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function _o(t,e,n,r,i){const o=Ke(t,E(r.payload.token.chain),r.payload.token.address.toUint8Array());return{payer:new d(n),config:G(t),vaa:Se(e,v.Buffer.from(r.hash)),claim:be(t,r.emitterAddress.toUint8Array(),E(r.emitterChain),r.sequence),endpoint:Fe(t,E(r.emitterChain),r.emitterAddress.toUint8Array()),to:new d(r.payload.to.address.toUint8Array()),toFees:new d(i===void 0?r.payload.to.address.toUint8Array():i),mint:o,wrappedMeta:Te(t,o),mintAuthority:mt(t),rent:oe,systemProgram:D.programId,tokenProgram:F,wormholeProgram:new d(e)}}function Oo(t,e,n,r,i){const o=ae(e,t).methods.createWrapped();return o._ixFn(...o._args,{accounts:qo(e,n,r,i),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function qo(t,e,n,r){const i=Ke(t,E(r.payload.token.chain),r.payload.token.address.toUint8Array());return{payer:new d(n),config:G(t),endpoint:Fe(t,E(r.emitterChain),r.emitterAddress.toUint8Array()),vaa:Se(e,v.Buffer.from(r.hash)),claim:be(t,r.emitterAddress.toUint8Array(),E(r.emitterChain),r.sequence),mint:i,wrappedMeta:Te(t,i),splMetadata:ft(i),mintAuthority:mt(t),rent:oe,systemProgram:D.programId,tokenProgram:F,splMetadataProgram:Tt.programId,wormholeProgram:new d(e)}}function ds(t,e,n){const r=ae(t).methods.initialize(n);return r._ixFn(...r._args,{accounts:Lo(t,e),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function Lo(t,e){return{payer:new d(e),config:G(t),rent:oe,systemProgram:D.programId}}function gs(t,e,n,r){const i=ae(t).methods.registerChain();return i._ixFn(...i._args,{accounts:Do(t,e,n,r),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function Do(t,e,n,r){return{payer:new d(n),config:G(t),endpoint:Fe(t,E(r.payload.foreignChain),r.payload.foreignAddress.toUint8Array()),vaa:Se(e,v.Buffer.from(r.hash)),claim:be(t,r.emitterAddress.toUint8Array(),E(r.emitterChain),r.sequence),rent:oe,systemProgram:D.programId,wormholeProgram:new d(e)}}function hs(t,e,n,r,i){const o=ae(t).methods.upgradeContract();return o._ixFn(...o._args,{accounts:Vo(t,e,n,r,i),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function Vo(t,e,n,r,i){return{payer:new d(n),vaa:Se(e,v.Buffer.from(r.hash)),claim:be(t,r.emitterAddress.toUint8Array(),E(r.emitterChain),r.sequence),upgradeAuthority:mr(t),spill:new d(i===void 0?n:i),implementation:new d(r.payload.newContract),programData:pr(t),tokenBridgeProgram:new d(t),rent:oe,clock:ei,bpfLoaderUpgradeable:fr.programId,systemProgram:D.programId}}function vn(t,e,n,r,i,o,s,a,u,h,S,k){const b=ae(e,t).methods.transferNative(a,u,h,v.Buffer.from(S),k);return b._ixFn(...b._args,{accounts:$o(e,n,r,i,o,s),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function $o(t,e,n,r,i,o){const{wormholeBridge:s,wormholeMessage:a,wormholeEmitter:u,wormholeSequence:h,wormholeFeeCollector:S,clock:k,rent:b,systemProgram:M}=ut(t,e,n,r);return{payer:new d(n),config:G(t),from:new d(i),mint:new d(o),custody:lt(t,o),authoritySigner:Ne(t),custodySigner:et(t),wormholeBridge:s,wormholeMessage:a,wormholeEmitter:u,wormholeSequence:h,wormholeFeeCollector:S,clock:k,rent:b,systemProgram:M,tokenProgram:F,wormholeProgram:new d(e)}}function An(t,e,n,r,i,o,s,a,u,h,S,k){const b=ae(e,t).methods.transferNativeWithPayload(a,u,v.Buffer.from(h),S,v.Buffer.from(k),null);return b._ixFn(...b._args,{accounts:dr(e,n,r,i,o,s),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function dr(t,e,n,r,i,o,s){const{wormholeBridge:a,wormholeMessage:u,wormholeEmitter:h,wormholeSequence:S,wormholeFeeCollector:k,clock:b,rent:M,systemProgram:B}=ut(t,e,n,r);return{payer:new d(n),config:G(t),from:new d(i),mint:new d(o),custody:lt(t,o),authoritySigner:Ne(t),custodySigner:et(t),wormholeBridge:a,wormholeMessage:u,wormholeEmitter:h,wormholeSequence:S,wormholeFeeCollector:k,clock:b,sender:new d(s===void 0?n:Dt(s)),rent:M,systemProgram:B,tokenProgram:F,wormholeProgram:new d(e)}}function Ho(t,e,n,r,i,o,s,a,u,h,S,k,b,M){const B=ae(e,t).methods.transferWrapped(h,S,k,v.Buffer.from(b),M);return B._ixFn(...B._args,{accounts:jo(e,n,r,i,o,s,a,u),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function jo(t,e,n,r,i,o,s,a){const u=Ke(t,s,a),{wormholeBridge:h,wormholeMessage:S,wormholeEmitter:k,wormholeSequence:b,wormholeFeeCollector:M,clock:B,rent:y,systemProgram:C}=ut(t,e,n,r);return{payer:new d(n),config:G(t),from:new d(i),fromOwner:new d(o),mint:u,wrappedMeta:Te(t,u),authoritySigner:Ne(t),wormholeBridge:h,wormholeMessage:S,wormholeEmitter:k,wormholeSequence:b,wormholeFeeCollector:M,clock:B,rent:y,systemProgram:C,wormholeProgram:new d(e),tokenProgram:F}}function Jo(t,e,n,r,i,o,s,a,u,h,S,k,b,M){const B=ae(e,t).methods.transferWrappedWithPayload(h,S,v.Buffer.from(k),b,v.Buffer.from(M),null);return B._ixFn(...B._args,{accounts:gr(e,n,r,i,o,s,a,u),signers:void 0,remainingAccounts:void 0,preInstructions:void 0,postInstructions:void 0})}function gr(t,e,n,r,i,o,s,a,u){const h=Ke(t,s,a),{wormholeBridge:S,wormholeMessage:k,wormholeEmitter:b,wormholeSequence:M,wormholeFeeCollector:B,clock:y,rent:C,systemProgram:W}=ut(t,e,n,r);return{payer:new d(n),config:G(t),from:new d(i),fromOwner:new d(o),mint:h,wrappedMeta:Te(t,h),authoritySigner:Ne(t),wormholeBridge:S,wormholeMessage:k,wormholeEmitter:b,wormholeSequence:M,wormholeFeeCollector:B,clock:y,sender:new d(u===void 0?n:Dt(u)),rent:C,systemProgram:W,wormholeProgram:new d(e),tokenProgram:F}}function ls(t,e,n){const{wormholeEmitter:r,wormholeBridge:i,wormholeFeeCollector:o,wormholeSequence:s}=yr(e,n);return{tokenBridgeConfig:G(e),tokenBridgeAuthoritySigner:Ne(e),tokenBridgeCustodySigner:et(e),tokenBridgeMintAuthority:mt(e),tokenBridgeSender:Dt(t),tokenBridgeRedeemer:Vt(t),wormholeBridge:i,tokenBridgeEmitter:r,wormholeFeeCollector:o,tokenBridgeSequence:s}}function Go(t,e,n,r,i,o,s){const a=dr(e,n,r,i,o,s,t);return{payer:a.payer,tokenBridgeConfig:a.config,fromTokenAccount:a.from,mint:a.mint,tokenBridgeCustody:a.custody,tokenBridgeAuthoritySigner:a.authoritySigner,tokenBridgeCustodySigner:a.custodySigner,wormholeBridge:a.wormholeBridge,wormholeMessage:a.wormholeMessage,tokenBridgeEmitter:a.wormholeEmitter,tokenBridgeSequence:a.wormholeSequence,wormholeFeeCollector:a.wormholeFeeCollector,clock:a.clock,tokenBridgeSender:a.sender,rent:a.rent,systemProgram:a.systemProgram,tokenProgram:a.tokenProgram,wormholeProgram:a.wormholeProgram}}function Zo(t,e,n,r,i,o,s,a,u){const h=gr(e,n,r,i,o,u===void 0?t:u,s,a,t);return{payer:h.payer,tokenBridgeConfig:h.config,fromTokenAccount:h.from,fromTokenAccountOwner:h.fromOwner,tokenBridgeWrappedMint:h.mint,tokenBridgeWrappedMeta:h.wrappedMeta,tokenBridgeAuthoritySigner:h.authoritySigner,wormholeBridge:h.wormholeBridge,wormholeMessage:h.wormholeMessage,tokenBridgeEmitter:h.wormholeEmitter,tokenBridgeSequence:h.wormholeSequence,wormholeFeeCollector:h.wormholeFeeCollector,clock:h.clock,tokenBridgeSender:h.sender,rent:h.rent,systemProgram:h.systemProgram,tokenProgram:h.tokenProgram,wormholeProgram:h.wormholeProgram}}function ms(t,e,n,r,i){const o=new d(r.payload.token.address.toUint8Array()),s=new d(r.payload.to.address.toUint8Array());return{payer:new d(n),tokenBridgeConfig:G(t),vaa:Se(e,v.Buffer.from(r.hash)),tokenBridgeClaim:be(t,r.emitterAddress.toUint8Array(),E(r.emitterChain),r.sequence),tokenBridgeForeignEndpoint:Fe(t,E(r.emitterChain),r.emitterAddress.toUint8Array()),toTokenAccount:new d(i),tokenBridgeRedeemer:Vt(s),toFeesTokenAccount:new d(i),tokenBridgeCustody:lt(t,o),mint:o,tokenBridgeCustodySigner:et(t),rent:oe,systemProgram:D.programId,tokenProgram:F,wormholeProgram:new d(e)}}function ps(t,e,n,r,i){const o=Ke(t,E(r.payload.token.chain),r.payload.token.address.toUint8Array()),s=new d(r.payload.to.address.toUint8Array());return{payer:new d(n),tokenBridgeConfig:G(t),vaa:Se(e,v.Buffer.from(r.hash)),tokenBridgeClaim:be(t,r.emitterAddress.toUint8Array(),E(r.emitterChain),r.sequence),tokenBridgeForeignEndpoint:Fe(t,E(r.emitterChain),r.emitterAddress.toUint8Array()),toTokenAccount:new d(i),tokenBridgeRedeemer:Vt(s),toFeesTokenAccount:new d(i),tokenBridgeWrappedMint:o,tokenBridgeWrappedMeta:Te(t,o),tokenBridgeMintAuthority:mt(t),rent:oe,systemProgram:D.programId,tokenProgram:F,wormholeProgram:new d(e)}}const Qo={version:"0.1.0",name:"token_bridge_relayer",constants:[{name:"SEED_PREFIX_BRIDGED",type:"bytes",value:"[98, 114, 105, 100, 103, 101, 100]"},{name:"SEED_PREFIX_TMP",type:"bytes",value:"[116, 109, 112]"},{name:"SWAP_RATE_PRECISION",type:"u32",value:"100_000_000"}],instructions:[{name:"initialize",docs:["This instruction is be used to generate your program's config.","And for convenience, we will store Wormhole-related PDAs in the","config so we can verify these accounts with a simple == constraint.","# Arguments","","* `ctx`           - `Initialize` context","* `fee_recipient` - Recipient of all relayer fees and swap proceeds","* `assistant`     - Privileged key to manage certain accounts"],accounts:[{name:"owner",isMut:!0,isSigner:!0,docs:["Deployer of the program."]},{name:"senderConfig",isMut:!0,isSigner:!1,docs:["Sender Config account, which saves program data useful for other","instructions, specifically for outbound transfers. Also saves the payer","of the [`initialize`](crate::initialize) instruction as the program's","owner."]},{name:"redeemerConfig",isMut:!0,isSigner:!1,docs:["Redeemer Config account, which saves program data useful for other","instructions, specifically for inbound transfers. Also saves the payer","of the [`initialize`](crate::initialize) instruction as the program's","owner."]},{name:"ownerConfig",isMut:!0,isSigner:!1,docs:["Owner config account, which saves the owner, assistant and","pending owner keys. This account is used to manage the ownership of the","program."]},{name:"tokenBridgeEmitter",isMut:!1,isSigner:!1,docs:["that holds data; it is purely just a signer for posting Wormhole","messages on behalf of the Token Bridge program."]},{name:"tokenBridgeSequence",isMut:!1,isSigner:!1,docs:["Token Bridge emitter's sequence account. Like with all Wormhole","emitters, this account keeps track of the sequence number of the last","posted message."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]},{name:"programData",isMut:!0,isSigner:!1,docs:["upgrade authority. We check this PDA address just in case there is another program that this","deployer has deployed.","","NOTE: Set upgrade authority is scary because any public key can be used to set as the","authority."]},{name:"bpfLoaderUpgradeableProgram",isMut:!1,isSigner:!1}],args:[{name:"feeRecipient",type:"publicKey"},{name:"assistant",type:"publicKey"}]},{name:"registerForeignContract",docs:["This instruction registers a new foreign contract (from another","network) and saves the emitter information in a ForeignEmitter account.","This instruction is owner-only, meaning that only the owner of the","program (defined in the [Config] account) can add and update foreign","contracts.","","# Arguments","","* `ctx`     - `RegisterForeignContract` context","* `chain`   - Wormhole Chain ID","* `address` - Wormhole Emitter Address","* `relayer_fee` - Relayer fee scaled by the `relayer_fee_precision`"],accounts:[{name:"owner",isMut:!0,isSigner:!0,docs:["Owner of the program set in the [`SenderConfig`] account. Signer for","creating [`ForeignContract`] account."]},{name:"config",isMut:!1,isSigner:!1,docs:["Sender Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Read-only."]},{name:"foreignContract",isMut:!0,isSigner:!1,docs:["Foreign Contract account. Create this account if an emitter has not been","registered yet for this Wormhole chain ID. If there already is a","contract address saved in this account, overwrite it."]},{name:"tokenBridgeForeignEndpoint",isMut:!1,isSigner:!1,docs:["Token Bridge foreign endpoint. This account should really be one","endpoint per chain, but Token Bridge's PDA allows for multiple","endpoints for each chain. We store the proper endpoint for the","emitter chain."]},{name:"tokenBridgeProgram",isMut:!1,isSigner:!1,docs:["Token Bridge program."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"chain",type:"u16"},{name:"address",type:{array:["u8",32]}},{name:"relayerFee",type:"u64"}]},{name:"registerToken",docs:["This instruction registers a new token and saves the initial `swap_rate`","and `max_native_token_amount` in a RegisteredToken account.","This instruction is owner-only, meaning that only the owner of the","program (defined in the [Config] account) can register a token.","","# Arguments","","* `ctx` - `RegisterToken` context","* `swap_rate`:","- USD conversion rate scaled by the `swap_rate_precision`. For example,","- if the conversion rate is $15 and the `swap_rate_precision` is","- 1000000, the `swap_rate` should be set to 15000000.","* `max_native_swap_amount`:","- Maximum amount of native tokens that can be swapped for this token","- on this chain."],accounts:[{name:"owner",isMut:!0,isSigner:!0,docs:["Owner of the program set in the [`SenderConfig`] account. Signer for","creating [`ForeignContract`] account."]},{name:"config",isMut:!1,isSigner:!1,docs:["Sender Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Read-only."]},{name:"registeredToken",isMut:!0,isSigner:!1,docs:["Registered Token account. This account stores information about the","token, including the swap rate and max native swap amount. Create this","account if the mint has not been registered yet. Mutable."]},{name:"mint",isMut:!1,isSigner:!1,docs:["Mint info. This is the SPL token that will be bridged over to the","foreign contract."]},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"swapRate",type:"u64"},{name:"maxNativeSwapAmount",type:"u64"}]},{name:"deregisterToken",docs:["This instruction deregisters a token by closing the existing","`RegisteredToken` account for a particular mint. This instruction is","owner-only, meaning that only the owner of the program (defined in the","[Config] account) can deregister a token."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`SenderConfig`] account. Signer for","closing [`RegisteredToken`] account."]},{name:"config",isMut:!1,isSigner:!1,docs:["Sender Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Read-only."]},{name:"mint",isMut:!1,isSigner:!1,docs:["Mint info. This is the SPL token that will be bridged over to the","foreign contract."]},{name:"registeredToken",isMut:!0,isSigner:!1,docs:["Registered Token account. This account stores information about the","token, including the swap rate and max native swap amount. This account","also determines if a mint is registered or not."]}],args:[]},{name:"updateRelayerFee",docs:["This instruction updates the `relayer_fee` in the `ForeignContract` account.","The `relayer_fee` is scaled by the `relayer_fee_precision`. For example,","if the `relayer_fee` is $15 and the `relayer_fee_precision` is 1000000,","the `relayer_fee` should be set to 15000000. This instruction can","only be called by the owner or assistant, which are defined in the","[OwnerConfig] account.","","# Arguments","","* `ctx`   - `UpdateRelayerFee` context","* `chain` - Wormhole Chain ID","* `fee`   - Relayer fee scaled by the `relayer_fee_precision`"],accounts:[{name:"payer",isMut:!0,isSigner:!0,docs:["Signer of the transaction. Must be the owner or assistant."]},{name:"ownerConfig",isMut:!1,isSigner:!1,docs:["The owner_config is used when updating the swap rate","so that the assistant key can be used in addition to the","owner key."]},{name:"foreignContract",isMut:!0,isSigner:!1,docs:["This account holds the USD denominated relayer fee for the specified","`chain`. This account is used to determine the cost of relaying","a transfer to a target chain. If there already is a relayer fee","saved in this account, overwrite it."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"chain",type:"u16"},{name:"fee",type:"u64"}]},{name:"updateRelayerFeePrecision",docs:["This instruction updates the `relayer_fee_precision` in the","`SenderConfig` and `RedeemerConfig` accounts. The `relayer_fee_precision`","is used to scale the `relayer_fee`. This instruction is owner-only,","meaning that only the owner of the program (defined in the [Config]","account) can register a token.","","# Arguments","","* `ctx` - `UpdatePrecision` context","* `relayer_fee_precision` - Precision used to scale the relayer fee."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`RedeemerConfig`] and [`SenderConfig`] account."]},{name:"redeemerConfig",isMut:!0,isSigner:!1,docs:["Redeemer Config account. This program requires that the `owner`","specified in the context equals the pubkey specified in this account.","Mutable."]},{name:"senderConfig",isMut:!0,isSigner:!1,docs:["Sender Config account. This program requires that the `owner`","specified in the context equals the pubkey specified in this account.","Mutable. The `owner` check is redundant here, but we keep it as an","extra protection for future changes to the context. Mutable."]}],args:[{name:"relayerFeePrecision",type:"u32"}]},{name:"updateSwapRate",docs:["This instruction updates the `swap_rate` in the `RegisteredToken`","account. This instruction can only be called by the owner or","assistant, which are defined in the [OwnerConfig] account.","","# Arguments","","* `ctx`       - `UpdateSwapRate` context","* `swap_rate` - USD conversion rate for the specified token."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["The signer of the transaction. Must be the owner or assistant."]},{name:"ownerConfig",isMut:!1,isSigner:!1,docs:["The owner_config is used when updating the swap rate so that the","assistant key can be used in additional to the owner key."]},{name:"registeredToken",isMut:!0,isSigner:!1,docs:["Registered Token account. This account stores information about the","token, including the swap rate and max native swap amount. The program","will modify this account to update the swap rate. Mutable."]},{name:"mint",isMut:!1,isSigner:!1,docs:["Mint info. This is the SPL token that will be bridged over to the","foreign contract."]}],args:[{name:"swapRate",type:"u64"}]},{name:"updateMaxNativeSwapAmount",docs:["This instruction updates the `max_native_swap_amount` in the","`RegisteredToken` account. This instruction is owner-only,","meaning that only the owner of the program (defined in the [Config]","account) can register a token.","","# Arguments","","* `ctx` - `UpdateMaxNativeSwapAmount` context","* `max_native_swap_amount`:","- Maximum amount of native tokens that can be swapped for this token","- on this chain."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`SenderConfig`] account. Signer for","creating [`ForeignContract`] account."]},{name:"config",isMut:!1,isSigner:!1,docs:["Sender Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Read-only."]},{name:"registeredToken",isMut:!0,isSigner:!1,docs:["Registered Token account. This account stores information about the","token, including the swap rate and max native swap amount. The program","will modify this account when the swap rate or max native swap amount","changes. Mutable."]},{name:"mint",isMut:!1,isSigner:!1,docs:["Mint info. This is the SPL token that will be bridged over to the","foreign contract."]}],args:[{name:"maxNativeSwapAmount",type:"u64"}]},{name:"setPauseForTransfers",docs:["This instruction updates the `paused` boolean in the `SenderConfig`","account. This instruction is owner-only, meaning that only the owner","of the program (defined in the [Config] account) can pause outbound","transfers.","","# Arguments","","* `ctx` - `PauseOutboundTransfers` context","* `paused` - Boolean indicating whether outbound transfers are paused."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`SenderConfig`] account."]},{name:"config",isMut:!0,isSigner:!1,docs:["Sender Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Mutable."]}],args:[{name:"paused",type:"bool"}]},{name:"submitOwnershipTransferRequest",docs:["This instruction sets the `pending_owner` field in the `OwnerConfig`","account. This instruction is owner-only, meaning that only the owner","of the program (defined in the [Config] account) can submit an","ownership transfer request.","","# Arguments","","* `ctx`       - `ManageOwnership` context","* `new_owner` - Pubkey of the pending owner."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`OwnerConfig`] account."]},{name:"ownerConfig",isMut:!0,isSigner:!1,docs:["Owner Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Mutable."]}],args:[{name:"newOwner",type:"publicKey"}]},{name:"confirmOwnershipTransferRequest",docs:["This instruction confirms that the `pending_owner` is the signer of","the transaction and updates the `owner` field in the `SenderConfig`,","`RedeemerConfig`, and `OwnerConfig` accounts."],accounts:[{name:"pendingOwner",isMut:!1,isSigner:!0,docs:["Must be the pending owner of the program set in the [`OwnerConfig`]","account."]},{name:"ownerConfig",isMut:!0,isSigner:!1,docs:["Owner Config account. This program requires that the `pending_owner`","specified in the context equals the pubkey specified in this account."]},{name:"senderConfig",isMut:!0,isSigner:!1,docs:["Sender Config account. This instruction will update the `owner`","specified in this account to the `pending_owner` specified in the","[`OwnerConfig`] account. Mutable."]},{name:"redeemerConfig",isMut:!0,isSigner:!1,docs:["Redeemer Config account. This instruction will update the `owner`","specified in this account to the `pending_owner` specified in the","[`OwnerConfig`] account. Mutable."]}],args:[]},{name:"cancelOwnershipTransferRequest",docs:["This instruction cancels the ownership transfer request by setting","the `pending_owner` field in the `OwnerConfig` account to `None`.","This instruction is owner-only, meaning that only the owner of the","program (defined in the [Config] account) can cancel an ownership","transfer request."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`OwnerConfig`] account."]},{name:"ownerConfig",isMut:!0,isSigner:!1,docs:["Owner Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Mutable."]}],args:[]},{name:"updateAssistant",docs:["This instruction updates the `assistant` field in the `OwnerConfig`","account. This instruction is owner-only, meaning that only the owner","of the program (defined in the [Config] account) can update the","assistant.","","# Arguments","","* `ctx` - `ManageOwnership` context","* `new_assistant` - Pubkey of the new assistant."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`OwnerConfig`] account."]},{name:"ownerConfig",isMut:!0,isSigner:!1,docs:["Owner Config account. This program requires that the `owner` specified","in the context equals the pubkey specified in this account. Mutable."]}],args:[{name:"newAssistant",type:"publicKey"}]},{name:"updateFeeRecipient",docs:["This instruction updates the `fee_recipient` field in the `RedeemerConfig`","account. This instruction is owner-only, meaning that only the owner","of the program (defined in the [Config] account) can update the","fee recipient.","","# Arguments","","* `ctx` - `UpdateFeeRecipient` context","* `new_fee_recipient` - Pubkey of the new fee recipient."],accounts:[{name:"owner",isMut:!1,isSigner:!0,docs:["Owner of the program set in the [`RedeemerConfig`] account."]},{name:"redeemerConfig",isMut:!0,isSigner:!1,docs:["Redeemer Config account, which saves program data useful for other","instructions, specifically for inbound transfers. Also saves the payer","of the [`initialize`](crate::initialize) instruction as the program's","owner."]}],args:[{name:"newFeeRecipient",type:"publicKey"}]},{name:"transferNativeTokensWithRelay",docs:["This instruction is used to transfer native tokens from Solana to a","foreign blockchain. The user can optionally specify a","`to_native_token_amount` to swap some of the tokens for the native","asset on the target chain. For a fee, an off-chain relayer will redeem","the transfer on the target chain. If the user is transferring native","SOL, the contract will automatically wrap the lamports into a WSOL.","","# Arguments","","* `ctx` - `TransferNativeWithRelay` context","* `amount` - Amount of tokens to send","* `to_native_token_amount`:","- Amount of tokens to swap for native assets on the target chain","* `recipient_chain` - Chain ID of the target chain","* `recipient_address` - Address of the target wallet on the target chain","* `batch_id` - Nonce of Wormhole message","* `wrap_native` - Whether to wrap native SOL"],accounts:[{name:"payer",isMut:!0,isSigner:!0,docs:["Payer will pay Wormhole fee to transfer tokens and create temporary","token account."]},{name:"payerSequence",isMut:!0,isSigner:!1,docs:["Used to keep track of payer's Wormhole sequence number."]},{name:"config",isMut:!1,isSigner:!1,docs:["Sender Config account. Acts as the signer for the Token Bridge token","transfer. Read-only."]},{name:"foreignContract",isMut:!1,isSigner:!1,docs:["Foreign Contract account. Send tokens to the contract specified in this","account. Funnily enough, the Token Bridge program does not have any","requirements for outbound transfers for the recipient chain to be","registered. This account provides extra protection against sending","tokens to an unregistered Wormhole chain ID. Read-only."]},{name:"mint",isMut:!0,isSigner:!1,docs:["Mint info. This is the SPL token that will be bridged over to the","foreign contract. Mutable."]},{name:"fromTokenAccount",isMut:!0,isSigner:!1,docs:["Payer's associated token account. We may want to make this a generic","token account in the future."]},{name:"registeredToken",isMut:!1,isSigner:!1},{name:"tmpTokenAccount",isMut:!0,isSigner:!1,docs:["Program's temporary token account. This account is created before the","instruction is invoked to temporarily take custody of the payer's","tokens. When the tokens are finally bridged out, the token account","will have zero balance and can be closed."]},{name:"tokenBridgeConfig",isMut:!1,isSigner:!1},{name:"tokenBridgeCustody",isMut:!0,isSigner:!1,docs:["account that holds this mint's balance. This account needs to be","unchecked because a token account may not have been created for this","mint yet. Mutable."]},{name:"tokenBridgeAuthoritySigner",isMut:!1,isSigner:!1},{name:"tokenBridgeCustodySigner",isMut:!1,isSigner:!1},{name:"wormholeBridge",isMut:!0,isSigner:!1},{name:"wormholeMessage",isMut:!0,isSigner:!1,docs:["tokens transferred in this account for our program. Mutable."]},{name:"tokenBridgeEmitter",isMut:!1,isSigner:!1},{name:"tokenBridgeSequence",isMut:!0,isSigner:!1},{name:"wormholeFeeCollector",isMut:!0,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1},{name:"tokenBridgeProgram",isMut:!1,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1}],args:[{name:"amount",type:"u64"},{name:"toNativeTokenAmount",type:"u64"},{name:"recipientChain",type:"u16"},{name:"recipientAddress",type:{array:["u8",32]}},{name:"batchId",type:"u32"},{name:"wrapNative",type:"bool"}]},{name:"transferWrappedTokensWithRelay",docs:["This instruction is used to transfer wrapped tokens from Solana to a","foreign blockchain. The user can optionally specify a","`to_native_token_amount` to swap some of the tokens for the native","assets on the target chain. For a fee, an off-chain relayer will redeem","the transfer on the target chain. This instruction should only be called","when the user is transferring a wrapped token.","","# Arguments","","* `ctx` - `TransferWrappedWithRelay` context","* `amount` - Amount of tokens to send","* `to_native_token_amount`:","- Amount of tokens to swap for native assets on the target chain","* `recipient_chain` - Chain ID of the target chain","* `recipient_address` - Address of the target wallet on the target chain","* `batch_id` - Nonce of Wormhole message"],accounts:[{name:"payer",isMut:!0,isSigner:!0,docs:["Payer will pay Wormhole fee to transfer tokens."]},{name:"payerSequence",isMut:!0,isSigner:!1,docs:["Used to keep track of payer's Wormhole sequence number."]},{name:"config",isMut:!1,isSigner:!1,docs:["Sender Config account. Acts as the Token Bridge sender PDA. Mutable."]},{name:"foreignContract",isMut:!1,isSigner:!1,docs:["Foreign Contract account. Send tokens to the contract specified in this","account. Funnily enough, the Token Bridge program does not have any","requirements for outbound transfers for the recipient chain to be","registered. This account provides extra protection against sending","tokens to an unregistered Wormhole chain ID. Read-only."]},{name:"tokenBridgeWrappedMint",isMut:!0,isSigner:!1,docs:["Token Bridge wrapped mint info. This is the SPL token that will be","bridged to the foreign contract. The wrapped mint PDA must agree","with the native token's metadata. Mutable."]},{name:"fromTokenAccount",isMut:!0,isSigner:!1,docs:["Payer's associated token account. We may want to make this a generic","token account in the future."]},{name:"registeredToken",isMut:!1,isSigner:!1},{name:"tmpTokenAccount",isMut:!0,isSigner:!1,docs:["Program's temporary token account. This account is created before the","instruction is invoked to temporarily take custody of the payer's","tokens. When the tokens are finally bridged out, the token account","will have zero balance and can be closed."]},{name:"tokenBridgeWrappedMeta",isMut:!1,isSigner:!1,docs:["about the token from its native chain:","* Wormhole Chain ID","* Token's native contract address","* Token's native decimals"]},{name:"tokenBridgeConfig",isMut:!1,isSigner:!1},{name:"tokenBridgeAuthoritySigner",isMut:!1,isSigner:!1},{name:"wormholeBridge",isMut:!0,isSigner:!1},{name:"wormholeMessage",isMut:!0,isSigner:!1,docs:["tokens transferred in this account."]},{name:"tokenBridgeEmitter",isMut:!1,isSigner:!1},{name:"tokenBridgeSequence",isMut:!0,isSigner:!1},{name:"wormholeFeeCollector",isMut:!0,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1},{name:"tokenBridgeProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"clock",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1}],args:[{name:"amount",type:"u64"},{name:"toNativeTokenAmount",type:"u64"},{name:"recipientChain",type:"u16"},{name:"recipientAddress",type:{array:["u8",32]}},{name:"batchId",type:"u32"}]},{name:"completeNativeTransferWithRelay",docs:["This instruction is used to redeem token transfers from foreign emitters.","It takes custody of the released native tokens and sends the tokens to the","encoded `recipient`. It pays the `fee_recipient` in the token","denomination. If requested by the user, it will perform a swap with the","off-chain relayer to provide the user with lamports. If the token","being transferred is WSOL, the contract will unwrap the WSOL and send","the lamports to the recipient and pay the relayer in lamports.","","# Arguments","","* `ctx` - `CompleteNativeWithRelay` context","* `vaa_hash` - Hash of the VAA that triggered the transfer"],accounts:[{name:"payer",isMut:!0,isSigner:!0,docs:["Payer will pay Wormhole fee to transfer tokens and create temporary","token account."]},{name:"config",isMut:!1,isSigner:!1,docs:["Redeemer Config account. Acts as the Token Bridge redeemer, which signs","for the complete transfer instruction. Read-only."]},{name:"feeRecipientTokenAccount",isMut:!0,isSigner:!1,docs:["Fee recipient's token account. Must be an associated token account. Mutable."]},{name:"foreignContract",isMut:!1,isSigner:!1,docs:["Foreign Contract account. The registered contract specified in this","account must agree with the target address for the Token Bridge's token","transfer. Read-only."]},{name:"mint",isMut:!1,isSigner:!1,docs:["Mint info. This is the SPL token that will be bridged over from the","foreign contract. This must match the token address specified in the","signed Wormhole message. Read-only."]},{name:"recipientTokenAccount",isMut:!0,isSigner:!1,docs:["Recipient associated token account. The recipient authority check","is necessary to ensure that the recipient is the intended recipient","of the bridged tokens. Mutable."]},{name:"recipient",isMut:!0,isSigner:!1,docs:["transaction. This instruction verifies that the recipient key","passed in this context matches the intended recipient in the vaa."]},{name:"registeredToken",isMut:!1,isSigner:!1},{name:"nativeRegisteredToken",isMut:!1,isSigner:!1},{name:"tmpTokenAccount",isMut:!0,isSigner:!1,docs:["Program's temporary token account. This account is created before the","instruction is invoked to temporarily take custody of the payer's","tokens. When the tokens are finally bridged in, the tokens will be","transferred to the destination token accounts. This account will have","zero balance and can be closed."]},{name:"tokenBridgeConfig",isMut:!1,isSigner:!1},{name:"vaa",isMut:!1,isSigner:!1,docs:["Verified Wormhole message account. The Wormhole program verified","signatures and posted the account data here. Read-only."]},{name:"tokenBridgeClaim",isMut:!0,isSigner:!1,docs:["is true if the bridged assets have been claimed. If the transfer has","not been redeemed, this account will not exist yet.","","NOTE: The Token Bridge program's claim account is only initialized when","a transfer is redeemed (and the boolean value `true` is written as","its data).","","The Token Bridge program will automatically fail if this transfer","is redeemed again. But we choose to short-circuit the failure as the","first evaluation of this instruction."]},{name:"tokenBridgeForeignEndpoint",isMut:!1,isSigner:!1,docs:["endpoint per chain, but the PDA allows for multiple endpoints for each","chain! We store the proper endpoint for the emitter chain."]},{name:"tokenBridgeCustody",isMut:!0,isSigner:!1,docs:["account that holds this mint's balance."]},{name:"tokenBridgeCustodySigner",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1},{name:"tokenBridgeProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1}],args:[{name:"vaaHash",type:{array:["u8",32]}}]},{name:"completeWrappedTransferWithRelay",docs:["This instruction is used to redeem token transfers from foreign emitters.","It takes custody of the minted wrapped tokens and sends the tokens to the","encoded `recipient`. It pays the `fee_recipient` in the wrapped-token","denomination. If requested by the user, it will perform a swap with the","off-chain relayer to provide the user with lamports.","","# Arguments","","* `ctx` - `CompleteWrappedWithRelay` context","* `vaa_hash` - Hash of the VAA that triggered the transfer"],accounts:[{name:"payer",isMut:!0,isSigner:!0,docs:["Payer will pay Wormhole fee to transfer tokens and create temporary","token account."]},{name:"config",isMut:!1,isSigner:!1,docs:["Redeemer Config account. Acts as the Token Bridge redeemer, which signs","for the complete transfer instruction. Read-only."]},{name:"feeRecipientTokenAccount",isMut:!0,isSigner:!1,docs:["Fee recipient's token account. Must be an associated token account. Mutable."]},{name:"foreignContract",isMut:!1,isSigner:!1,docs:["Foreign Contract account. The registered contract specified in this","account must agree with the target address for the Token Bridge's token","transfer. Read-only."]},{name:"tokenBridgeWrappedMint",isMut:!0,isSigner:!1,docs:["Token Bridge wrapped mint info. This is the SPL token that will be","bridged from the foreign contract. The wrapped mint PDA must agree","with the native token's metadata in the wormhole message. Mutable."]},{name:"recipientTokenAccount",isMut:!0,isSigner:!1,docs:["Recipient associated token account. The recipient authority check","is necessary to ensure that the recipient is the intended recipient","of the bridged tokens. Mutable."]},{name:"recipient",isMut:!0,isSigner:!1,docs:["transaction. This instruction verifies that the recipient key","passed in this context matches the intended recipient in the vaa."]},{name:"registeredToken",isMut:!1,isSigner:!1},{name:"nativeRegisteredToken",isMut:!1,isSigner:!1},{name:"tmpTokenAccount",isMut:!0,isSigner:!1,docs:["Program's temporary token account. This account is created before the","instruction is invoked to temporarily take custody of the payer's","tokens. When the tokens are finally bridged in, the tokens will be","transferred to the destination token accounts. This account will have","zero balance and can be closed."]},{name:"tokenBridgeWrappedMeta",isMut:!1,isSigner:!1,docs:["about the token from its native chain:","* Wormhole Chain ID","* Token's native contract address","* Token's native decimals"]},{name:"tokenBridgeConfig",isMut:!1,isSigner:!1},{name:"vaa",isMut:!1,isSigner:!1,docs:["Verified Wormhole message account. The Wormhole program verified","signatures and posted the account data here. Read-only."]},{name:"tokenBridgeClaim",isMut:!0,isSigner:!1,docs:["is true if the bridged assets have been claimed. If the transfer has","not been redeemed, this account will not exist yet.","","NOTE: The Token Bridge program's claim account is only initialized when","a transfer is redeemed (and the boolean value `true` is written as","its data).","","The Token Bridge program will automatically fail if this transfer","is redeemed again. But we choose to short-circuit the failure as the","first evaluation of this instruction."]},{name:"tokenBridgeForeignEndpoint",isMut:!1,isSigner:!1,docs:["endpoint per chain, but the PDA allows for multiple endpoints for each","chain! We store the proper endpoint for the emitter chain."]},{name:"tokenBridgeMintAuthority",isMut:!1,isSigner:!1},{name:"wormholeProgram",isMut:!1,isSigner:!1},{name:"tokenBridgeProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1}],args:[{name:"vaaHash",type:{array:["u8",32]}}]}],accounts:[{name:"foreignContract",docs:["Foreign emitter account data."],type:{kind:"struct",fields:[{name:"chain",docs:["Emitter chain. Cannot equal `1` (Solana's Chain ID)."],type:"u16"},{name:"address",docs:["Emitter address. Cannot be zero address."],type:{array:["u8",32]}},{name:"tokenBridgeForeignEndpoint",docs:["Token Bridge program's foreign endpoint account key."],type:"publicKey"},{name:"fee",docs:["The fee that is paid to the `fee_recipient` upon redeeming a transfer.","This value is set in terms of USD and scaled by the `relayer_fee_precision`.","For example, if the `relayer_fee_precision` is `100000000` and the intended","fee is $5, then the `fee` value should be `500000000`."],type:"u64"}]}},{name:"ownerConfig",docs:["Owner account data."],type:{kind:"struct",fields:[{name:"owner",docs:["Program's owner."],type:"publicKey"},{name:"assistant",docs:["Program's assistant. Can be used to update the relayer fee and swap rate."],type:"publicKey"},{name:"pendingOwner",docs:["Intermediate storage for the pending owner. Is used to transfer ownership."],type:{option:"publicKey"}}]}},{name:"redeemerConfig",type:{kind:"struct",fields:[{name:"owner",docs:["Program's owner."],type:"publicKey"},{name:"bump",docs:["PDA bump."],type:"u8"},{name:"relayerFeePrecision",docs:["Relayer fee and swap rate precision."],type:"u32"},{name:"feeRecipient",docs:["Recipient of all relayer fees and swap proceeds."],type:"publicKey"}]}},{name:"registeredToken",docs:["Registered token account data."],type:{kind:"struct",fields:[{name:"swapRate",docs:["Token swap rate. The swap rate is the USD conversion rate of the token."],type:"u64"},{name:"maxNativeSwapAmount",docs:["Maximum amount of native SOL the contract will swap for each transfer."],type:"u64"}]}},{name:"senderConfig",type:{kind:"struct",fields:[{name:"owner",docs:["Program's owner."],type:"publicKey"},{name:"bump",docs:["PDA bump."],type:"u8"},{name:"tokenBridge",docs:["Token Bridge program's relevant addresses."],type:{defined:"OutboundTokenBridgeAddresses"}},{name:"relayerFeePrecision",docs:["Relayer fee and swap rate precision."],type:"u32"},{name:"paused",docs:["Boolean indicating whether outbound transfers are paused."],type:"bool"}]}},{name:"signerSequence",type:{kind:"struct",fields:[{name:"value",type:"u64"}]}}],types:[{name:"OutboundTokenBridgeAddresses",type:{kind:"struct",fields:[{name:"sequence",type:"publicKey"}]}},{name:"TokenBridgeRelayerMessage",docs:["Expected message types for this program. Only valid payloads are:","* `TransferWithRelay`: Payload ID == 1.","","Payload IDs are encoded as u8."],type:{kind:"enum",variants:[{name:"TransferWithRelay",fields:[{name:"target_relayer_fee",type:"u64"},{name:"to_native_token_amount",type:"u64"},{name:"recipient",type:{array:["u8",32]}}]}]}}],errors:[{code:6e3,name:"InvalidWormholeBridge",msg:"InvalidWormholeBridge"},{code:6001,name:"InvalidWormholeFeeCollector",msg:"InvalidWormholeFeeCollector"},{code:6002,name:"OwnerOnly",msg:"OwnerOnly"},{code:6003,name:"OutboundTransfersPaused",msg:"OutboundTransfersPaused"},{code:6004,name:"OwnerOrAssistantOnly",msg:"OwnerOrAssistantOnly"},{code:6005,name:"NotPendingOwner",msg:"NotPendingOwner"},{code:6006,name:"AlreadyTheOwner",msg:"AlreadyTheOwner"},{code:6007,name:"AlreadyTheAssistant",msg:"AlreadyTheAssistant"},{code:6008,name:"AlreadyTheFeeRecipient",msg:"AlreadyTheFeeRecipient"},{code:6009,name:"BumpNotFound",msg:"BumpNotFound"},{code:6010,name:"FailedToMakeImmutable",msg:"FailedToMakeImmutable"},{code:6011,name:"InvalidForeignContract",msg:"InvalidForeignContract"},{code:6012,name:"ZeroBridgeAmount",msg:"ZeroBridgeAmount"},{code:6013,name:"InvalidToNativeAmount",msg:"InvalidToNativeAmount"},{code:6014,name:"NativeMintRequired",msg:"NativeMintRequired"},{code:6015,name:"SwapsNotAllowedForNativeMint",msg:"SwapsNotAllowedForNativeMint"},{code:6016,name:"InvalidTokenBridgeConfig",msg:"InvalidTokenBridgeConfig"},{code:6017,name:"InvalidTokenBridgeAuthoritySigner",msg:"InvalidTokenBridgeAuthoritySigner"},{code:6018,name:"InvalidTokenBridgeCustodySigner",msg:"InvalidTokenBridgeCustodySigner"},{code:6019,name:"InvalidTokenBridgeEmitter",msg:"InvalidTokenBridgeEmitter"},{code:6020,name:"InvalidTokenBridgeSequence",msg:"InvalidTokenBridgeSequence"},{code:6021,name:"InvalidRecipient",msg:"InvalidRecipient"},{code:6022,name:"InvalidTransferToChain",msg:"InvalidTransferToChain"},{code:6023,name:"InvalidTransferTokenChain",msg:"InvalidTransferTokenChain"},{code:6024,name:"InvalidPrecision",msg:"InvalidPrecision"},{code:6025,name:"InvalidTransferToAddress",msg:"InvalidTransferToAddress"},{code:6026,name:"AlreadyRedeemed",msg:"AlreadyRedeemed"},{code:6027,name:"InvalidTokenBridgeForeignEndpoint",msg:"InvalidTokenBridgeForeignEndpoint"},{code:6028,name:"InvalidTokenBridgeMintAuthority",msg:"InvalidTokenBridgeMintAuthority"},{code:6029,name:"InvalidPublicKey",msg:"InvalidPublicKey"},{code:6030,name:"ZeroSwapRate",msg:"ZeroSwapRate"},{code:6031,name:"TokenNotRegistered",msg:"TokenNotRegistered"},{code:6032,name:"ChainNotRegistered",msg:"ChainNotRegistered"},{code:6033,name:"TokenAlreadyRegistered",msg:"TokenAlreadyRegistered"},{code:6034,name:"FeeCalculationError",msg:"TokenFeeCalculationError"},{code:6035,name:"InvalidSwapCalculation",msg:"InvalidSwapCalculation"},{code:6036,name:"InsufficientFunds",msg:"InsufficientFunds"}]};function jt(t,e){return new Bn(Qo,new d(t),{connection:e})}function hr(t,e){return O([v.Buffer.from("seq"),new d(e).toBuffer()],t)}async function Xo(t,e,n,r,i,o,s,a,u,h,S,k){const{methods:{transferNativeTokensWithRelay:b},account:{signerSequence:M}}=jt(e,t),B=hr(e,n),y=await M.fetch(B).then(({value:ge})=>ge).catch(ge=>{var we;if((we=ge.message)!=null&&we.includes("Account does not exist"))return new _(0);throw ge}),C=rr(e,n,y),W=Kt(new d(o),new d(n)),q=nr(e,o),_e=Go(e,r,i,n,C,W,o);return b(new _(s.toString()),new _(a.toString()),E(h),[...u],S,k).accounts({config:tr(e),payerSequence:B,foreignContract:_t(e,h),registeredToken:Ot(e,o),tmpTokenAccount:q,tokenBridgeProgram:new d(r),..._e}).instruction()}async function Yo(t,e,n,r,i,o,s,a,u,h,S){const{methods:{transferWrappedTokensWithRelay:k},account:{signerSequence:b}}=jt(e,t),M=hr(e,n),B=await b.fetch(M).then(({value:we})=>we).catch(we=>{var Zt;if((Zt=we.message)!=null&&Zt.includes("Account does not exist"))return new _(0);throw we}),y=rr(e,n,B),C=Kt(new d(o),new d(n)),{chain:W,tokenAddress:q}=await rt(t,r,o),_e=nr(e,o),ge=Zo(e,r,i,n,y,C,W,q);return k(new _(s.toString()),new _(a.toString()),E(h),[...u],S).accounts({config:tr(e),payerSequence:M,foreignContract:_t(e,h),registeredToken:Ot(e,new d(o)),tmpTokenAccount:_e,tokenBridgeProgram:new d(r),...ge}).instruction()}class Jt{constructor(e,n,r,i){T(this,"network"),T(this,"chain"),T(this,"connection"),T(this,"contracts"),T(this,"chainId"),T(this,"coreBridge"),T(this,"tokenBridge"),this.network=e,this.chain=n,this.connection=r,this.contracts=i,this.chainId=E(n);const o=i.tokenBridge;if(!o)throw new Error(`TokenBridge contract Address for chain ${n} not found`);this.tokenBridge=ae(o,r),this.coreBridge=new wr(e,n,r,i)}static async fromRpc(e,n){const[r,i]=await Le.chainFromRpc(e),o=n[i];if(o.network!==r)throw new Error(`Network mismatch for chain ${i}: ${o.network} != ${r}`);return new Jt(r,i,e,o.contracts)}async isWrappedAsset(e){return rt(this.connection,this.tokenBridge.programId,new L(e).toUint8Array()).catch(n=>null).then(n=>n!=null)}async getOriginalAsset(e){if(!await this.isWrappedAsset(e))throw yt(e.toString());const n=new L(e).toUint8Array(),r=new d(n);try{const i=await rt(this.connection,this.tokenBridge.programId,n);return i===null?{chain:this.chain,address:new L(r.toBytes()).toUniversalAddress()}:{chain:Tr(i.chain),address:new Tn(i.tokenAddress)}}catch{throw yt(e.toString())}}async hasWrappedAsset(e){try{return await this.getWrappedAsset(e),!0}catch{}return!1}async getWrappedAsset(e){if(We(e.address))throw new Error("Native cannot be a wrapped asset");const n=Ke(this.tokenBridge.programId,E(e.chain),e.address.toUniversalAddress().toUint8Array());try{return await rt(this.connection,this.tokenBridge.programId,n),St(this.chain,n.toBase58())}catch{}throw yt(`${n}: ${e.address.toUniversalAddress().toString()}`)}async isTransferCompleted(e){return kr(this.connection,this.tokenBridge.programId,e.emitterAddress.toUint8Array(),E(e.emitterChain),e.sequence,this.connection.commitment).catch(()=>!1)}async getWrappedNative(){return St(this.chain,pe.toBase58())}async*createAttestation(e,n){if(!n)throw new Error("Payer required to create attestation");const r=new L(n).unwrap(),i=0,o=await this.coreBridge.getMessageFee(),s=Sr(this.coreBridge.coreBridge.programId,r,o),a=fe.generate(),u=Fo(this.connection,this.tokenBridge.programId,this.coreBridge.address,r,new L(e).unwrap(),a.publicKey,i),h=new Q().add(s,u);h.feePayer=r,yield this.createUnsignedTx({transaction:h,signers:[a]},"Solana.AttestToken")}async*submitAttestation(e,n){if(!n)throw new Error("Payer required to create attestation");const r=new L(n).unwrap();yield*this.coreBridge.postVaa(r,e);const i=new Q().add(Oo(this.connection,this.tokenBridge.programId,this.coreBridge.address,r,e));i.feePayer=r,yield this.createUnsignedTx({transaction:i},"Solana.CreateWrapped")}async transferSol(e,n,r,i){const o=new L(e).unwrap(),s=o,a=n.address.toUniversalAddress().toUint8Array(),u=E(n.chain),h=0,S=0n,k=fe.generate(),b=fe.generate(),M=await dn(this.connection),B=D.createAccount({fromPubkey:s,newAccountPubkey:b.publicKey,lamports:M,space:ie,programId:F}),y=D.transfer({fromPubkey:s,lamports:r,toPubkey:b.publicKey}),C=fn(b.publicKey,pe,s),W=wn(this.tokenBridge.programId,b.publicKey,s,r),q=i?An(this.connection,this.tokenBridge.programId,this.coreBridge.address,o,k.publicKey,b.publicKey,pe,h,r,a,u,i):vn(this.connection,this.tokenBridge.programId,this.coreBridge.address,o,k.publicKey,b.publicKey,pe,h,r,S,a,u),_e=un(b.publicKey,s,s),ge=new Q;return ge.feePayer=s,ge.add(B,y,C,W,q,_e),this.createUnsignedTx({transaction:ge,signers:[k,b]},"TokenBridge.TransferNative")}async*transfer(e,n,r,i,o){if(We(r)){yield await this.transferSol(e,n,i,o);return}const s=new L(r).unwrap(),a=new L(e).unwrap(),u=await gn(s,a),h=n.address.toUniversalAddress().toUint8Array(),S=E(n.chain),k=0,b=0n,M=!await this.isWrappedAsset(r),B=fe.generate();let y;if(M)y=o?An(this.connection,this.tokenBridge.programId,this.coreBridge.address,a,B.publicKey,u,s,k,i,h,S,o):vn(this.connection,this.tokenBridge.programId,this.coreBridge.address,a,B.publicKey,u,s,k,i,b,h,S);else{const q=await this.getOriginalAsset(r);if(We(q.address))throw new Error("Native cannot be an original asset");y=o?Jo(this.connection,this.tokenBridge.programId,this.coreBridge.address,a,B.publicKey,u,a,E(q.chain),q.address.toUint8Array(),k,i,h,S,o):Ho(this.connection,this.tokenBridge.programId,this.coreBridge.address,a,B.publicKey,u,a,E(q.chain),q.address.toUint8Array(),k,i,b,h,S)}const C=wn(this.tokenBridge.programId,u,a,i),W=new Q().add(C,y);W.feePayer=a,yield this.createUnsignedTx({transaction:W,signers:[B]},"TokenBridge.TransferTokens")}async*redeemAndUnwrap(e,n){const r=new L(e).unwrap(),i=new L(n.payload.to.address).unwrap(),o=await Ri(this.connection,pe).then(B=>n.payload.token.amount*BigInt(Math.pow(10,B.decimals-8))),s=await dn(this.connection),a=fe.generate(),u=bn(this.connection,this.tokenBridge.programId,this.coreBridge.address,r,n),h=D.createAccount({fromPubkey:r,newAccountPubkey:a.publicKey,lamports:s,space:ie,programId:F}),S=fn(a.publicKey,pe,r),k=po(i,a.publicKey,r,o.valueOf()),b=un(a.publicKey,r,r),M=new Q;M.feePayer=r,M.add(u,h,S,k,b),yield this.createUnsignedTx({transaction:M,signers:[a]},"TokenBridge.RedeemAndUnwrap")}async*createAta(e,n){const r=new L(e).unwrap(),i=new L(n).unwrap(),o=await gn(i,r);if(await this.connection.getAccountInfo(o)===null){const s=new Q().add(er(r,o,r,i));s.feePayer=r,yield this.createUnsignedTx({transaction:s},"Redeem.CreateATA")}}async*redeem(e,n,r=!0){const i=n.payload.token.chain===this.chain?n.payload.token.address:(await this.getWrappedAsset(n.payload.token)).toUniversalAddress();if(yield*this.createAta(e,i),yield*this.coreBridge.postVaa(e,n),r){const u=new L(await this.getWrappedNative());if(Br.equals(i.toUint8Array(),u.toUint8Array())){yield*this.redeemAndUnwrap(e,n);return}}const o=new L(e).unwrap(),s=n.payload.token.chain==this.chain?bn:Ko,a=new Q().add(s(this.connection,this.tokenBridge.programId,this.coreBridge.address,o,n));a.feePayer=o,yield this.createUnsignedTx({transaction:a},"Solana.RedeemTransfer")}createUnsignedTx(e,n,r=!1){return new In(e,this.network,this.chain,n,r)}}const es={Testnet:["7VPWjBhCXrpYYBiRKZh1ubh9tLZZNkZGp2ReRphEV4Mc","3WK3mEDNPrNuQReBvM28NcsqrExMnPxD9pPJmgrUeKKH","BaGfF51MQ3a61papTRDYaNefBgTQ9ywnVne5fCff4bxT","ACbmcQxbbhiXWM1GmapUSMmBYKMvnFLfAAXKqdo8xKwo","GQtMXZxnuacCFTXVeTvyHi6P9F6chbtzhVc8JgD8hv7c","3Ftc5hTz9sG4huk79onufGiebJNDMZNL8HYgdMJ9E7JR","DMw2tLaq1bVoAEKtkoUtieSk9bfCPUvubYLatTMsSVop","84F2QX9278ToDmA98u4A86xSV9hz1ovazr8zwGaX6qjS","So11111111111111111111111111111111111111112","8987WGkYa5viiZ9DD8sS3PB5XghKmWjkEgmzvwDuoAEc","BJZ72CjPQojVoH68mzrd4VQ4nr6KuhbAGnhZEZCujKxY"],Mainnet:["7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs","A9mUU4qviSctJVPJdBJWkb28deg915LYJKrzQ19ji3FM","Dn4noZ5jgGfkntzcQSUZ8czkreiZ1ForXYoV2H8Dm7S1","3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh","9gP2kCy3wA1ctvYWQk75guqXuHfrEomqydHLtcTCqiLa","Gz7VkD4MacbEB6yC5XD3HcumEiYx2EtDYYrfikGsvopG","KgV1GvrHQmRBY8sHQQeUKwTm2r2h8t4C8qt12Cw1HVE","DRQBDBEWmwWGK13fRTLhSPzjbvMSUavhV6nW4RUH8W6T","9kvAcwQbqejuJMd59mKuw2bfSsLRaQ7zuvaTVHEeBBec","7ixSaXGsHAFy34wogPk2YXiUX3BMmQMFdercdaHLnBby","G1vJEgzepqhnVu35BN4jrkv3wVwkujYWFFCxhbEZ1CZr","So11111111111111111111111111111111111111112"],Devnet:[]},Ie=9,qe=new _(10),Ce=new _(1e8);class Gt{constructor(e,n,r,i){T(this,"network"),T(this,"chain"),T(this,"connection"),T(this,"contracts"),T(this,"chainId"),T(this,"coreBridgeProgramId"),T(this,"tokenBridgeProgramId"),T(this,"tokenBridgeRelayer"),this.network=e,this.chain=n,this.connection=r,this.contracts=i,this.chainId=E(n);const o=i.tokenBridgeRelayer;if(!o)throw new Error(`TokenBridge contract Address for chain ${n} not found`);this.tokenBridgeRelayer=jt(o,r),this.tokenBridgeProgramId=new d(i.tokenBridge),this.coreBridgeProgramId=new d(i.coreBridge)}static async fromRpc(e,n){const[r,i]=await Le.chainFromRpc(e),o=n[i];if(o.network!==r)throw new Error(`Network mismatch for chain ${i}: ${o.network} != ${r}`);return new Gt(r,i,e,o.contracts)}async*transfer(e,n,r,i,o){const s=new L(e).unwrap(),a=n.address.toUniversalAddress().toUint8Array(),u=this.mintAddress(r),h=new Q;if(We(r)){const M=Kt(u,s);try{await xi(this.connection,M)}catch(B){if(B instanceof zt){const y=er(s,M,s,u);h.add(y)}else throw B}}const S=o||0n,k=We(r),b=k?await Xo(this.connection,this.tokenBridgeRelayer.programId,s,this.tokenBridgeProgramId,this.coreBridgeProgramId,u,i,S,a,n.chain,0,k):await Yo(this.connection,this.tokenBridgeRelayer.programId,s,this.tokenBridgeProgramId,this.coreBridgeProgramId,u,i,S,a,n.chain,0);h.add(b),h.feePayer=s,yield this.createUnsignedTx({transaction:h},"AutomaticTokenBridge.Transfer")}async*redeem(e,n){const r=new Q;throw yield this.createUnsignedTx({transaction:r},"AutomaticTokenBridge.Redeem"),new Error("Method not implemented.")}async getRelayerFee(e,n){const r=this.mintAddress(n),[{fee:i},{swapRate:o},{relayerFeePrecision:s}]=await Promise.all([this.getForeignContract(e),this.getRegisteredToken(r),this.getRedeemerConfig()]),a=Number(await Le.getDecimals(this.chain,this.connection,n)),u=qe.pow(new _(a)).mul(i).mul(Ce).div(new _(s).mul(o));return BigInt(u.toString())}async maxSwapAmount(e){const n=this.mintAddress(e),[{swapRate:r,maxNativeSwapAmount:i},{swapRate:o}]=await Promise.all([this.getRegisteredToken(n),this.getRegisteredToken(pe)]),s=Number(await Le.getDecimals(this.chain,this.connection,e)),a=this.calculateNativeSwapRate(o,r),u=s>Ie?i.mul(a).mul(qe.pow(new _(s-Ie))).div(Ce):i.mul(a).div(qe.pow(new _(Ie-s)).mul(Ce));return BigInt(u.toString())}async nativeTokenAmount(e,n){if(n===0n)return 0n;const r=this.mintAddress(e),i=Number(await Le.getDecimals(this.chain,this.connection,e)),[{swapRate:o},{swapRate:s}]=await Promise.all([this.getRegisteredToken(r),this.getRegisteredToken(pe)]),a=this.calculateNativeSwapRate(s,o),u=i>Ie?Ce.mul(new _(n.toString())).div(a.mul(qe.pow(new _(i-Ie)))):Ce.mul(new _(n.toString())).mul(qe.pow(new _(Ie-i))).div(a);return BigInt(u.toString())}async isRegisteredToken(e){var n;const r=this.mintAddress(e);try{return await this.getRegisteredToken(r),!0}catch(i){if((n=i.message)!=null&&n.includes("Account does not exist"))return!1;throw i}}mintAddress(e){return We(e)?new d(pe):new L(e).unwrap()}async getRegisteredTokens(){return es[this.network].map(e=>St(this.chain,e))}calculateNativeSwapRate(e,n){return Ce.mul(e).div(n)}async getForeignContract(e){return await this.tokenBridgeRelayer.account.foreignContract.fetch(_t(this.tokenBridgeRelayer.programId,e))}async getRegisteredToken(e){return await this.tokenBridgeRelayer.account.registeredToken.fetch(Ot(this.tokenBridgeRelayer.programId,e))}async getRedeemerConfig(){return await this.tokenBridgeRelayer.account.redeemerConfig.fetch(fo(this.tokenBridgeRelayer.programId))}createUnsignedTx(e,n,r=!1){return new In(e,this.network,this.chain,n,r)}}Pn(Cn,"TokenBridge",Jt);Pn(Cn,"AutomaticTokenBridge",Gt);export{at as CreateMetadataAccountArgs,Oe as Creator,pt as Data,Lt as EndpointRegistration,kn as Key,Ht as Metadata,Gt as SolanaAutomaticTokenBridge,Jt as SolanaTokenBridge,Tt as SplTokenMetadataProgram,sr as TOKEN_BRIDGE_IDL,Qo as TOKEN_BRIDGE_RELAYER_IDL,qt as TokenBridgeConfig,$t as WrappedMeta,Uo as coder,wn as createApproveAuthoritySignerInstruction,Fo as createAttestTokenInstruction,bn as createCompleteTransferNativeInstruction,Ko as createCompleteTransferWrappedInstruction,Oo as createCreateWrappedInstruction,ds as createInitializeInstruction,ae as createReadOnlyTokenBridgeProgramInterface,gs as createRegisterChainInstruction,zo as createTokenBridgeProgramInterface,jt as createTokenBridgeRelayerProgramInterface,vn as createTransferNativeInstruction,Xo as createTransferNativeTokensWithRelayInstruction,An as createTransferNativeWithPayloadInstruction,Ho as createTransferWrappedInstruction,Yo as createTransferWrappedTokensWithRelayInstruction,Jo as createTransferWrappedWithPayloadInstruction,hs as createUpgradeContractInstruction,Ne as deriveAuthoritySignerKey,lt as deriveCustodyKey,et as deriveCustodySignerKey,Fe as deriveEndpointKey,_t as deriveForeignContractAddress,mt as deriveMintAuthorityKey,Vt as deriveRedeemerAccountKey,fo as deriveRedeemerConfigAddress,Ot as deriveRegisteredTokenAddress,Dt as deriveSenderAccountKey,tr as deriveSenderConfigAddress,ft as deriveSplTokenMetadataKey,nr as deriveTmpTokenAccountAddress,G as deriveTokenBridgeConfigKey,rr as deriveTokenTransferMessageAddress,Te as deriveWrappedMetaKey,Ke as deriveWrappedMintKey,Sn as getAttestTokenAccounts,No as getCompleteTransferNativeAccounts,ms as getCompleteTransferNativeWithPayloadCpiAccounts,_o as getCompleteTransferWrappedAccounts,ps as getCompleteTransferWrappedWithPayloadCpiAccounts,qo as getCreateWrappedAccounts,cs as getEndpointRegistration,Lo as getInitializeAccounts,us as getMetadata,Do as getRegisterChainAccounts,as as getTokenBridgeConfig,ls as getTokenBridgeDerivedAccounts,$o as getTransferNativeAccounts,dr as getTransferNativeWithPayloadAccounts,Go as getTransferNativeWithPayloadCpiAccounts,jo as getTransferWrappedAccounts,gr as getTransferWrappedWithPayloadAccounts,Zo as getTransferWrappedWithPayloadCpiAccounts,Vo as getUpgradeContractAccounts,rt as getWrappedMeta};
