import{bz as h,aG as m,aF as d}from"./index-Bibw8odz.js";import{A as p}from"./aptos-BO2UZVcY-D3L1lMzy.js";import{T as w}from"./create-D7FD56l0-D2uTFRvt.js";import{b as l}from"./chain-DfK5JtF7-Jmo_aVnV.js";var u=Object.defineProperty,g=(a,e,t)=>e in a?u(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t,s=(a,e,t)=>(g(a,typeof e!="symbol"?e+"":e,t),t);class i{constructor(e,t,n,o){s(this,"network"),s(this,"chain"),s(this,"connection"),s(this,"contracts"),s(this,"chainId"),s(this,"coreBridge"),this.network=e,this.chain=t,this.connection=n,this.contracts=o,this.chainId=h(t);const r=o.coreBridge;if(!r)throw new Error(`CoreBridge contract Address for chain ${t} not found`);this.coreBridge=r}getGuardianSet(e){throw new Error("Method not implemented.")}getGuardianSetIndex(){throw new Error("Method not implemented.")}getMessageFee(){throw new Error("Method not implemented.")}static async fromRpc(e,t){const[n,o]=await p.chainFromRpc(e),r=t[o];if(r.network!==n)throw new Error(`Network mismatch: ${r.network} !== ${n}`);return new i(n,o,e,r.contracts)}async*publishMessage(e,t){throw new Error("Method not implemented.")}async*verifyMessage(e,t){throw new Error("Not implemented.")}async parseTransaction(e){return(await this.parseMessages(e)).map(t=>({chain:t.emitterChain,emitter:t.emitterAddress,sequence:t.sequence}))}async parseMessages(e){const t=await this.connection.getTransactionByHash(e);if(t.type!=="user_transaction")throw new Error(`${e} is not a user_transaction`);const n=t.events.filter(o=>o.type.endsWith("WormholeMessage"));if(!n||n.length===0)throw new Error(`WormholeMessage not found for ${e}`);return n.map(o=>{const r=o.data,c=new m(BigInt(r.sender).toString(16).padStart(64,"0"));return w("Uint8Array",{guardianSet:0,emitterChain:this.chain,emitterAddress:c,sequence:BigInt(r.sequence),timestamp:Number(r.timestamp),consistencyLevel:r.consistency_level,nonce:Number(r.nonce),signatures:[],payload:d.decode(r.payload)})})}}l("Aptos","WormholeCore",i);export{i as AptosWormholeCore};
