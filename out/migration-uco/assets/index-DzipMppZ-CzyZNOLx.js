import{ci as y,cq as T,bh as B,bz as A,c2 as b,c3 as v,aG as I,aS as k,d as $,bW as x,c4 as d,aK as m,aF as c,cr as U,bX as F}from"./index-Bibw8odz.js";import{a as h,A as S,c as E,b as w,d as f,i as W}from"./aptos-BO2UZVcY-D3L1lMzy.js";import{b as C}from"./chain-DfK5JtF7-Jmo_aVnV.js";var N=Object.defineProperty,Q=(i,e,t)=>e in i?N(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,r=(i,e,t)=>(Q(i,typeof e!="symbol"?e+"":e,t),t);class R{constructor(e,t,s,n,a=!1){r(this,"transaction"),r(this,"network"),r(this,"chain"),r(this,"description"),r(this,"parallelizable"),this.transaction=e,this.network=t,this.chain=s,this.description=n,this.parallelizable=a}}const z=[{name:"tokenBridgeAddress",...y},{name:"chain",...T()},{name:"domainSeparator",binary:"bytes",custom:B.encode(h),omit:!0},{name:"tokenId",...y},{name:"domainSeparator",binary:"bytes",custom:new Uint8Array([255]),omit:!0}],O=i=>F(z,i);class o{constructor(e,t,s,n){r(this,"network"),r(this,"chain"),r(this,"connection"),r(this,"contracts"),r(this,"chainId"),r(this,"tokenBridgeAddress"),this.network=e,this.chain=t,this.connection=s,this.contracts=n,this.chainId=A(t);const a=n.tokenBridge;if(!a)throw new Error(`TokenBridge contract Address for chain ${t} not found`);this.tokenBridgeAddress=a}static async fromRpc(e,t){const[s,n]=await S.chainFromRpc(e),a=t[n];if(a.network!==s)throw new Error("Network mismatch "+a.network+" !== "+s);return new o(s,n,e,a.contracts)}async isWrappedAsset(e){try{return await this.getOriginalAsset(e),!0}catch{return!1}}async getOriginalAsset(e){const t=e.toString().split(h);let s;if(s=(await this.connection.getAccountResource(t[0],`${this.tokenBridgeAddress}::state::OriginInfo`)).data,!s)throw b;const n=v(parseInt(s.token_chain.number)),a=new I(s.token_address.external_address);return{chain:n,address:a}}async hasWrappedAsset(e){try{return await this.getWrappedAsset(e),!0}catch{}return!1}async getWrappedAsset(e){const t=await this.getAssetFullyQualifiedType(e);if(!t)throw new Error("Invalid asset address.");return await this.connection.getAccountResource(E(t),`${this.tokenBridgeAddress}::state::OriginInfo`),k(this.chain,t)}async isTransferCompleted(e){const t=(await this.connection.getAccountResource(this.tokenBridgeAddress,`${this.tokenBridgeAddress}::state::State`)).data.consumed_vaas.elems.handle;try{return await this.connection.getTableItem(t,{key_type:"vector<u8>",value_type:"u8",key:`0x${$.Buffer.from(x(e.hash)).toString("hex")}`}),!0}catch{return!1}}async getWrappedNative(){return k(this.chain,w)}async*createAttestation(e,t){const s={chain:this.chain,address:new f(e)},n=await this.getAssetFullyQualifiedType(s);if(!n)throw new Error("Invalid asset address.");yield this.createUnsignedTx({function:`${this.tokenBridgeAddress}::attest_token::attest_token_entry`,type_arguments:[n],arguments:[]},"Aptos.AttestToken")}async*submitAttestation(e,t){yield this.createUnsignedTx({function:`${this.tokenBridgeAddress}::wrapped::create_wrapped_coin_type`,type_arguments:[],arguments:[d(e)]},"Aptos.CreateWrappedCoinType");const s=await this.getAssetFullyQualifiedType(e.payload.token);if(!s)throw new Error("Invalid asset address.");yield this.createUnsignedTx({function:`${this.tokenBridgeAddress}::wrapped::create_wrapped_coin`,type_arguments:[s],arguments:[d(e)]},"Aptos.CreateWrappedCoin")}async*transfer(e,t,s,n,a){const _=0n,l=0n,p=m(s)?w:s.toString(),u=t.address.toUniversalAddress().toUint8Array(),g=A(t.chain);a?yield this.createUnsignedTx({function:`${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_with_payload_entry`,type_arguments:[p],arguments:[n,g,u,l,a]},"Aptos.TransferTokensWithPayload"):yield this.createUnsignedTx({function:`${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_entry`,type_arguments:[p],arguments:[n,g,u,_,l]},"Aptos.TransferTokens")}async*redeem(e,t,s=!0){const n=t.payload.token.chain===this.chain?await this.getTypeFromExternalAddress(t.payload.token.address.toString()):await this.getAssetFullyQualifiedType(t.payload.token);if(!n)throw new Error("Invalid asset address.");yield this.createUnsignedTx({function:`${this.tokenBridgeAddress}::complete_transfer::submit_vaa_and_register_entry`,type_arguments:[n],arguments:[d(t)]},"Aptos.CompleteTransfer")}async getAssetFullyQualifiedType(e){return e.chain===this.chain?W(e.address.toString())?e.address.toString():null:`${o.getForeignAssetAddress(this.chain,this.tokenBridgeAddress,e)}::coin::T`}async getTypeFromExternalAddress(e){try{const t=(await this.connection.getAccountResource(this.tokenBridgeAddress,`${this.tokenBridgeAddress}::state::State`)).data,{handle:s}=t.native_infos,n=await this.connection.getTableItem(s,{key_type:`${this.tokenBridgeAddress}::token_hash::TokenHash`,value_type:"0x1::type_info::TypeInfo",key:{hash:e}});return n?[n.account_address,c.decode(n.module_name),c.decode(n.struct_name)].join(h):null}catch{return null}}static getForeignAssetAddress(e,t,s){if(m(s.address))throw new Error("Invalid token address");const n=O({chain:s.chain,tokenBridgeAddress:new f(t).toUniversalAddress(),tokenId:s.address.toUniversalAddress()});return c.encode(U(n),!0)}createUnsignedTx(e,t,s=!1){return new R(e,this.network,this.chain,t,s)}}C("Aptos","TokenBridge",o);export{o as AptosTokenBridge};
